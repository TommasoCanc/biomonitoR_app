runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
shiny::runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
data(macro_ex)
data_bio <- as_biomonitor(macro_ex)
data_agr <- aggregate_taxa(data_bio)
rmTaxa <- remove_taxa(data_agr, taxa = c("Baetis")) # Remove taxa
View(rmTaxa)
data_ts <- assign_traits(rmTaxa)
data_bio.rm <- as_biomonitor(rmTaxa)
data_agr.rm <- aggregate_taxa(rmTaxa)
data_agr.rm <- aggregate_taxa(data_bio.rm)
data_ts <- assign_traits(data_bio.rm)
data_ts <- assign_traits(data_agr.rm)
runApp('Desktop/biomonitoR_app/biomonitoR_app')
View(rmTaxa)
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
shiny::runApp()
runApp()
runApp()
runApp()
fluidRow(
##############
# Right side #
##############
column(width = 4 ,
box(width = NULL, solidHeader = TRUE,
HTML("<h3>
<b>Taxonomy check</b>
</h3> This panel can help you to check the nomenclature of your taxa and eventually remove taxa from the analysis. <br>
Taxa names are checked against the community type reference datasets or your custom
dataset if loaded.
<br>
If there are potentially erroneus names in your dataset, you can find possible
suggestions into the in in the appropriate space. <br>
<br>
Non-identfied taxa will be discarded.")),
uiOutput("correctNames"), # Open the box with correct names suggestions
# Remove taxa ----
# Which taxon/a do you u want to remove from your dataset?
box(title = "Remove taxa", solidHeader = FALSE, width = NULL, collapsible = TRUE, collapsed = TRUE,
selectizeInput("removeTaxa", "Select taxa to exclude from your dataset",
choices = NULL, multiple = TRUE)
)
),
#############
# Left side #
#############
column(width = 8,
uiOutput("tblTaxonomy"),
uiOutput("tblRmTaxa")
)
runApp()
runApp()
runApp()
fluidRow(
##############
# Right Side #
##############
column(width = 4 ,
box(width = NULL, solidHeader = TRUE,
HTML("<h3> <b>Custom Reference Datset</b> </h3>
To import your dataset in the biomonitoR-app, it is important to follow two simple rules: <br><br>
<h5> Note: biomonitoR-app can use three pre-setted reference datasets:
macroinvertebrates, macrophytes, and fish.
If you want to import your custom reference dataset, please follow the
instructions present in the <b>Help</b>. </h3>")
),
# Import dataset and set main parameters
box(title = "Create your Custom reference dataset", width = NULL, solidHeader = TRUE,
HTML("Select your data <h5> Data can be loaded in <b>.xlsx</b>, <b>.csv</b>, or <b>.txt</b> formats.</h5>"),
fileInput("fileCRD", label = NULL),
tags$hr(),
HTML("Select your reference community"),
selectInput("communitytypeCRD", "", choices = c("Macroinvertebrates" = "mi",
"Macrophytes" = "mf",
"Fish" = "fi",
"Custom" = "cu"),
selected = "mi", multiple = FALSE),
checkboxInput("runCRD", label = "Create your Custom reference dataset", value = FALSE)
# box(title = "Dou you want to download your Custom Reference Dataset?", solidHeader = FALSE, width = NULL,
#     checkboxInput("downloadCRD", label = "Download", value = FALSE)
# )
),
#############
# Left Side #
#############
column(width = 8,
uiOutput("tbl_boxInputTree"),
uiOutput("tbl_boxCRD")
#box(DTOutput("tblCRD"), width = NULL),
# conditionalPanel("input.downloadCRD == 1",
#                  box(downloadButton("download_CRD", label = "Download Table"), width = NULL))
)
)
runApp()
runApp()
runApp()
shiny::runApp()
fluidRow(
column(width = 4,
# Description panel
box(width = NULL, solidHeader = TRUE,
HTML("<h3> <b>Trait table management</b> </h3>
This panel ...")
),
# Assign Traits ----
box(width = NULL, solidHeader = TRUE,
HTML("<b> Assign traits </b>"),
checkboxInput("assignTrait", label = "Assign traits", value = FALSE),
selectInput("assTraitsGroup", "Biotic group of interest",
choices = c("Macroinvertebrate" = "mi",
"Macrophyte" = "mf",
"Fish" = "fi",
"Custom" = "cu"),
selected = "mi", multiple = FALSE),
selectInput("assTraitsLevel", "Taxonomic level",
choices = c("Family" = "Family",
"Subfamily" = "Subfamily",
"Tribus" = "Tribus",
"Genus" = "Genus",
"Species" = "Species",
"Subspecies" = "Subspecies",
"Taxa" = "Taxa"),
selected = "Taxa", multiple = FALSE),
selectInput("assFilterDistance", "Filter by distance",
choices = c("Null" = "Null",
"Positive" = "pos",
"Negative" = "neg",
"Numeric" = "numeric"),
selected = "Null", multiple = FALSE),
column(6,
numericInput("assFilterNumeric", "Filter by distance numeric", 0) # <-  quali sono i valori max e min?
)
),
# Manage Traits ----
box(width = NULL, solidHeader = TRUE,
HTML("<b> Manage traits </b>"),
selectizeInput("traitColumns", "Select traits columns", choices = NULL, multiple = TRUE),
checkboxInput("traitNear", label = "Select nearest traits based on taxonomic distance", value = FALSE),
radioButtons("manTraitsNear", "Nearest taxonomic distance", choiceNames = c("nearest", "nearest+", "nearest-", "nearest+-", "neareast-+"),
choiceValues = c("nearest", "nearest+", "nearest-", "nearest+-", "neareast-+"), selected = "nearest", inline = TRUE)
),
# Final table ----
box(width = NULL, solidHeader = TRUE,
HTML("<b> Select final trait table </b>"),
checkboxInput("avgTraits", label = "Average traits values for fuzzy data", value = FALSE),
HTML("<h4> Select your column blocks for fyuzzy data </h4>"),
textInput("colBlockFuzzy", label = NULL, value = "8, 7, 3, 9, 4, 3, 6, 2, 5, 3, 9, 8, 8, 5, 7, 5, 4, 4, 2, 3, 8"),
#OR
tags$br(),
checkboxInput("sampleTraits", label = "Random sampling traits", value = FALSE),
)
),
column(width = 8,
conditionalPanel("input.assignTrait == 1",
HTML("<h2> Assign traits </h2>"),
DTOutput("tbl_assignTrait")
),
conditionalPanel(condition = "input.traitColumns != ''",
HTML("<h2> Column trait selected </h2>"),
DTOutput("tbl_selColumn")
),
conditionalPanel("input.traitNear == 1",
HTML("<h2> Nearest traits </h2>"),
DTOutput("tbl_traitNear")
),
conditionalPanel("input.avgTraits == 1",
HTML("<h2> Average traits </h2>"),
DTOutput("tbl_avgTraits")
),
conditionalPanel("input.sampleTraits == 1",
HTML("<h2> Random traits </h2>"),
DTOutput("tbl_sampleTraits")
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
vignette("introduction", package = "biomonitoR")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(BAT)
library(performance)
library(modEvA)
library(lme4)
library(sp)
library(rgeos)
library(dplyr)
library(car)
library(MuMIn)
library(reshape2)
library(ape)
dataset <- read.csv("/Users/tommasocancellario/Desktop/Libro3.csv", sep=";")
head(dataset)
dataset <- dataset[c("SPECIES",
"LOCALITY",
"COUNTRY",
"LATITUDE",
"LONGITUDE",
"PROVINCE",
"DEPTH_ZONATION")]
head(dataset)
dataset$SPECIES <-gsub(". ", "_", dataset$SPECIES)
head(dataset)
dataset$LATITUDE <- round(dataset$LATITUDE, digits = 1)
dataset$LONGITUDE <- round(dataset$LONGITUDE, digits = 1)
dataset
head(dataset)
dataset <- dataset[complete.cases(dataset),]
dataset <- dataset[ which(dataset$DEPTH_ZONATION != "Bathyal"),]
eurostation <- read.csv("/Users/tommasocancellario/Desktop/Coordauthor2.csv", sep=";")
head(eurostation)
eurostation$LATITUDE <- round(eurostation$LATITUDE, digits = 1)
eurostation$LONGITUDE <- round(eurostation$LONGITUDE, digits = 1)
eurostation <- eurostation %>%
distinct(LONGITUDE, LATITUDE, .keep_all=T)
distances <- data.frame(matrix(1, nrow(dataset)))
head(distances)
View(distances)
names <- data.frame((matrix(1, nrow(dataset))))
for (i in 1:nrow(dataset)){
this.record <- data.matrix(dataset[i,c("LONGITUDE","LATITUDE")])
station.coor <- data.matrix(eurostation[,c("LONGITUDE","LATITUDE")])
this.distances <- spDistsN1(station.coor, this.record, longlat = T)
this.distances <- cbind(this.distances, eurostation$CODE) #combine distance matrix with station codes
distances[i,] <- min(this.distances) #keep only distance to closest station
names[i,] <- this.distances[ which (this.distances[,1]==distances[i,]),2]
}
data.dist <- cbind(dataset, distances, names)
colnames(data.dist)[(ncol(data.dist)-1)] <- "distance"
colnames(data.dist)[ncol(data.dist)] <- "station"
data.dist$distance <- round(as.numeric(data.dist$distance), digits = 0) #round distance to one decimal
head(data.dist)
hist(data.dist$distance, breaks = 50)
distances <- data.frame(matrix(1, nrow(dataset)))
names <- data.frame((matrix(1, nrow(dataset))))
i=1
this.record <- data.matrix(dataset[i,c("LONGITUDE","LATITUDE")])
this.record
station.coor <- data.matrix(eurostation[,c("LONGITUDE","LATITUDE")])
station.coor
this.distances <- spDistsN1(station.coor, this.record, longlat = T)
this.distances
this.distances <- cbind(this.distances, eurostation$CODE) #combine distance matrix with station codes
this.distances
min(this.distances)
this.distances
distances <- data.frame()
names <- data.frame()
this.record <- data.matrix(dataset[i,c("LONGITUDE","LATITUDE")])
this.record
station.coor <- data.matrix(eurostation[,c("LONGITUDE","LATITUDE")])
this.distances <- spDistsN1(station.coor, this.record, longlat = T)
this.distances
station.coor
this.distances.1 <- data.frame(code = eurostation$CODE,
distance = this.distances)
this.distances.1
str(this.distances.1)
this.distances.1[min(this.distances.1), ]
this.distances.1[min(this.distances.1$distance), ]
distances <- cbind(distances, this.distances.1[min(this.distances.1$distance), ])
this.distances.1[min(this.distances.1$distance), ]
distances
min.dist <- this.distances.1[min(this.distances.1$distance), ]
distances <- rbind(distances, this.distances.1[min(this.distances.1$distance), ]) #keep only distance to closest station
distances
this.distances[ which (this.distances[,1]==distances[i,]),2]
this.record <- data.matrix(dataset[i,c("LONGITUDE","LATITUDE")])
station.coor <- data.matrix(eurostation[,c("LONGITUDE","LATITUDE")])
this.distances <- spDistsN1(station.coor, this.record, longlat = T)
this.distances <- cbind(this.distances, eurostation$CODE) #combine distance matrix with station codes
this.distances[ which (this.distances[,1]==distances[i,]),2]
names[i,] <- this.distances[ which (this.distances[,1]==distances[i,]),2]
this.distances[,1]
distances <- data.frame()
names <- data.frame()
for (i in 1:nrow(dataset)){
this.record <- data.matrix(dataset[i,c("LONGITUDE","LATITUDE")])
station.coor <- data.matrix(eurostation[,c("LONGITUDE","LATITUDE")])
this.distances <- spDistsN1(station.coor, this.record, longlat = T)
#this.distances <- cbind(this.distances, eurostation$CODE) #combine distance matrix with station codes
this.distances.1 <- data.frame(code = eurostation$CODE,
distance = this.distances)
# str(this.distances.1)
distances <- rbind(distances, this.distances.1[min(this.distances.1$distance), ]) #keep only distance to closest station
#names[i,] <- this.distances[ which (this.distances[,1]==distances[i,]),2]
}
distances
distances <- data.frame()
names <- data.frame()
this.record <- data.matrix(dataset[i,c("LONGITUDE","LATITUDE")])
station.coor <- data.matrix(eurostation[,c("LONGITUDE","LATITUDE")])
this.distances <- spDistsN1(station.coor, this.record, longlat = T)
this.distances.1 <- data.frame(code = eurostation$CODE,
distance = this.distances)
min.dist <- this.distances.1[min(this.distances.1$distance), ]
min.dist
distances <- rbind(distances, min.dist)
distances
distances <- data.frame()
names <- data.frame()
for (i in 1:nrow(dataset)){
this.record <- data.matrix(dataset[i,c("LONGITUDE","LATITUDE")])
station.coor <- data.matrix(eurostation[,c("LONGITUDE","LATITUDE")])
this.distances <- spDistsN1(station.coor, this.record, longlat = T)
#this.distances <- cbind(this.distances, eurostation$CODE) #combine distance matrix with station codes
this.distances.1 <- data.frame(code = eurostation$CODE,
distance = this.distances)
# str(this.distances.1)
min.dist <- this.distances.1[min(this.distances.1$distance), ]
distances <- rbind(distances, min.dist) #keep only distance to closest station
#names[i,] <- this.distances[ which (this.distances[,1]==distances[i,]),2]
}
distances
i=5
this.record <- data.matrix(dataset[i,c("LONGITUDE","LATITUDE")])
this.record
station.coor <- data.matrix(eurostation[,c("LONGITUDE","LATITUDE")])
station.coor
this.distances <- spDistsN1(station.coor, this.record, longlat = T)
this.distances
this.distances.1 <- data.frame(code = eurostation$CODE,
distance = this.distances)
this.distances.1
min(this.distances.1$distance)
this.distances.1[min(this.distances.1$distance), ]
min(this.distances.1$distance)
View(this.distances.1)
this.distances.1 <- data.frame(code = eurostation$CODE,
distance = as.numeric(this.distances))
this.distances.1
this.distances.1[min(this.distances.1$distance), ]
this.distances.1$distance
min(this.distances.1$distance)
str(this.distances.1)
min.dist <- round(this.distances.1[min(this.distances.1$distance), ], digits=2)
min.dist <- this.distances.1[round(min(this.distances.1$distance), digits=2), ]
min.dist
dataset <- read.csv("/Users/tommasocancellario/Desktop/Libro3.csv", sep=";")
head(dataset)
str(dataset)
dataset <- dataset[c("SPECIES",
"LOCALITY",
"COUNTRY",
"LATITUDE",
"LONGITUDE",
"PROVINCE",
"DEPTH_ZONATION")]
dataset$SPECIES <-gsub(". ", "_", dataset$SPECIES)
dataset$LATITUDE <- round(dataset$LATITUDE, digits = 1)
dataset$LONGITUDE <- round(dataset$LONGITUDE, digits = 1)
str(dataset)
dataset <- dataset[complete.cases(dataset),]
dataset <- dataset[ which(dataset$DEPTH_ZONATION != "Bathyal"),]
eurostation <- read.csv("/Users/tommasocancellario/Desktop/Coordauthor2.csv", sep=";")
head(eurostation)
str(eurostation)
eurostation$LATITUDE <- round(eurostation$LATITUDE, digits = 1)
eurostation$LONGITUDE <- round(eurostation$LONGITUDE, digits = 1)
str(eurostation)
eurostation <- eurostation %>%
distinct(LONGITUDE, LATITUDE, .keep_all=T)
distances <- data.frame()
this.record <- data.matrix(dataset[i,c("LONGITUDE","LATITUDE")])
station.coor <- data.matrix(eurostation[,c("LONGITUDE","LATITUDE")])
this.distances <- spDistsN1(station.coor, this.record, longlat = T)
i=5
this.record <- data.matrix(dataset[i,c("LONGITUDE","LATITUDE")])
this.record
station.coor <- data.matrix(eurostation[,c("LONGITUDE","LATITUDE")])
this.distances <- spDistsN1(station.coor, this.record, longlat = T)
this.distances
this.distances <- round(spDistsN1(station.coor, this.record, longlat = T), digits=2)
this.distances
this.distances.1 <- data.frame(code = eurostation$CODE,
distance = this.distances)
this.distances.1
min.dist <- this.distances.1[min(this.distances.1$distance), ]
min.dist
View(this.distances.1)
min(this.distances.1$distance)
which(this.distances.1$distance == min(this.distances.1$distance))
source('~/Library/Containers/com.apple.mail/Data/Library/Mail Downloads/20D2E4D0-6D93-40F7-BAA4-C55AD958DA38/R-script_editado.R', echo=TRUE)
this.distances.1[which(this.distances.1$distance == min(this.distances.1$distance)), ]
min.dist <- this.distances.1[which(this.distances.1$distance == min(this.distances.1$distance)), ]
distances <- rbind(distances, min.dist) #keep only distance to closest station
distances
distances <- data.frame()
for (i in 1:nrow(dataset)){
this.record <- data.matrix(dataset[i,c("LONGITUDE","LATITUDE")])
station.coor <- data.matrix(eurostation[,c("LONGITUDE","LATITUDE")])
this.distances <- round(spDistsN1(station.coor, this.record, longlat = T), digits=2)
#this.distances <- cbind(this.distances, eurostation$CODE) #combine distance matrix with station codes
this.distances.1 <- data.frame(code = eurostation$CODE,
distance = this.distances)
# str(this.distances.1)
min.dist <- this.distances.1[which(this.distances.1$distance == min(this.distances.1$distance)), ]
distances <- rbind(distances, min.dist) #keep only distance to closest station
#names[i,] <- this.distances[ which (this.distances[,1]==distances[i,]),2]
}
distances
distances <- data.frame()
for (i in 1:nrow(dataset)){
this.record <- data.matrix(dataset[i,c("LONGITUDE","LATITUDE")])
station.coor <- data.matrix(eurostation[,c("LONGITUDE","LATITUDE")])
this.distances <- spDistsN1(station.coor, this.record, longlat = T)
#this.distances <- cbind(this.distances, eurostation$CODE) #combine distance matrix with station codes
this.distances.1 <- data.frame(code = eurostation$CODE,
distance = this.distances)
# str(this.distances.1)
min.dist <- this.distances.1[which(this.distances.1$distance == min(this.distances.1$distance)), ]
distances <- rbind(distances, min.dist) #keep only distance to closest station
#names[i,] <- this.distances[ which (this.distances[,1]==distances[i,]),2]
}
distances
hist(distance$distance, breaks = 50)
hist(distances$distance, breaks = 50)
