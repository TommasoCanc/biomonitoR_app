class(DataMeso)
class(DataMeso[{1}])
class(DataMeso[[1]])
r <-  read_rds("RasterSolsandes.rds")
PA <- read_rds("PA_SF_sandes.rds") %>% as_Spatial()
crs(r) <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
PA2 <- read_rds("PA_SF_sandes.rds")
DataMeso <- read_rds("Datassandes.rds") %>% bind_rows()
data("countriesHigh")
World <- st_as_sf(countriesHigh) %>% sf::st_crop(PA2)
class(DataMeso)
DataMeso$SpeciesID
unique(DataMeso$SpeciesID)
length(unique(DataMeso$SpeciesID))
knitr::include_graphics("NetFlow1.png", dpi = 140)
install.packages("memoise")
setwd("~/ShinyApps/sample-apps/NFlowPres")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(leaflet)
library(shiny)
library(raster)
library(tidyverse)
library(sf)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(knitr, rmarkdown, tidyverse, kableExtra, raster, plotly,leaflet, sp, sf, rgdal, fasterize, maps, maptools, rworldxtra, ggrepel, png, jpeg, ggthemes, rasterVis, memoise)
data("countriesHigh")
options("kableExtra.html.bsTable" = T)
r <-  read_rds("RasterSolsandes.rds")
PA <- read_rds("PA_SF_sandes.rds") %>% as_Spatial()
crs(r) <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
PA2 <- read_rds("PA_SF_sandes.rds")
DataMeso <- read_rds("Datassandes.rds") %>% bind_rows()
data("countriesHigh")
World <- st_as_sf(countriesHigh) %>% sf::st_crop(PA2)
Cost <- read_rds("Naidoosandes.rds")
Cost
summary(values(Cost))
hist(values(Cost))
sort(values(Cost))
sort(values(Cost))[1000:2000]
sort(values(Cost))[2000:3000]
sort(values(Cost))[4000:5000]
sort(values(Cost))[6000:7000]
sort(values(Cost))[7000:8000]
sort(values(Cost))[10000:11000]
cost
Cost
sort(values(Cost))[100000:101000]
sort(values(Cost))[80000:81000]
sort(values(Cost))[70000:71000]
sort(values(Cost))[50000:51000]
sort(values(Cost))[52000:53000]
sort(values(Cost))[54000:55000]
sort(values(Cost))[56000:57000]
sort(values(Cost))[58000:59000]
sort(values(Cost))[59000:60000]
sort(values(Cost))[60000:61000]
Solution <- read_rds("solutionsandes_gf.rds")
getwd()
Solution <- read_rds("Solutionsandes_gf.rds")
class(Solution)
class(Solution[[1]])
class(Solution[[2]])
class(Solution[[3]])
Solution
Solution[c(1:2)]
Solution <- Solution[!is.null(Solution)]
Solution[[1]]
!is.null(Solution)
Solution <- read_rds("Solutionsandes_gf.rds")
!is.null(Solution)
sappply(Solution, is.null)
sapply(Solution, is.null)
!sapply(Solution, is.null)
Solution <- read_rds("Solutionsandes_gf.rds")
Solution <- Solution[!sapply(Solution, is.null)]
Solution[[1]]
Solution[[2]]
Solution[[3]]
Solution[[4]]
length(Solution)
Order1 <- sample(length(Solution), 1:length(Solution))
Order1
?sample
set.seed(2018)
Order1 <- sample(1:length(Solution), length(Solution))
Order1
Solution <- read_rds("Solutionsandes_gf.rds")
Solution <- Solution[!sapply(Solution, is.null)]
set.seed(2018)
Order1 <- sample(1:length(Solution), length(Solution))
set.seed(2019)
Order2 <- sample(1:length(Solution), length(Solution))
Order1
Order2
Mask <- Cost
values(Mask) <- ifelse(is.na(values(Mask)), NA, 0)
plot(Mask)
Mask <- read_rds("RasterSolsandes.rds")
values(Mask) <- ifelse(is.na(values(Mask)), NA, 0)
plot(Mask+)
plot(Mask)
length(Order1)
seq(from = 10, to = 272, by = 10)
length(seq(from = 10, to = 272, by = 10))
Solution <- read_rds("Solutionsandes_gf.rds")
Solution <- Solution[!sapply(Solution, is.null)]
set.seed(2018)
Order1 <- sample(1:length(Solution), length(Solution))
set.seed(2019)
Order2 <- sample(1:length(Solution), length(Solution))
Seq <- seq(from = 10, to = 272, by = 10)
Mask <- read_rds("RasterSolsandes.rds")
values(Mask) <- ifelse(is.na(values(Mask)), NA, 0)
RasterSols <- list()
for(i in 1:length(Seq)){
Sols <- Solution[Order1[1:Seq[i]]] %>% purrr::map(bind_rows) %>% purrr::map(~group_by(.x, cellID)) %>% purrr::map(~summarise(.x,Priority = sqrt(sum(Priority^2))))
RasterSols[[i]] <- Mask
values(RasterSols[[i]])[Sols$cellID] <- Sols$Priority
RasterSols[[i]]/cellStats(RasterSols[[i]], max)
}
plot(RasterSols[[1]])
plot(RasterSols[[2]])
RasterSols
i = 1
Order1[1:Seq[i]]
Solution[Order1[1:Seq[i]]]
Solution[Order1[1:Seq[i]]] %>% purrr::map(bind_rows)
Solution[Order1[1:Seq[i]]]
Solution[Order1[1:Seq[i]]] %>% purrr::map(bind_rows)
Solution[[1]]
class(Solution[[1]])
Solution[Order1[1:Seq[i]]] %>% purrr::map(ungroup) %>% purrr::map(bind_rows)
Solution %>% purrr::map(ungroup) %>% purrr::map(bind_rows)
Sols <- Solution[Order1[1:Seq[i]]] %>% purrr::map(ungroup) %>% purrr::reduce(bind_rows) %>% purrr::map(~group_by(.x, cellID)) %>% purrr::map(~summarise(.x,Priority = sqrt(sum(Priority^2))))
Solution[Order1[1:Seq[i]]] %>% purrr::map(ungroup) %>% purrr::reduce(bind_rows)
Solution[Order1[1:Seq[i]]] %>% purrr::map(ungroup) %>% purrr::reduce(bind_rows) %>% purrr::map(~group_by(.x, cellID))
Sols <- Solution[Order1[1:Seq[i]]] %>% purrr::map(ungroup) %>% purrr::reduce(bind_rows)
class(Sols)
Sols <- Solution[Order1[1:Seq[i]]] %>% purrr::map(ungroup) %>% purrr::reduce(bind_rows) %>% group_by(cellID) %>% summarise(Priority = sqrt(sum(Priority^2)))
Sols
RasterSols <- list()
for(i in 1:length(Seq)){
Sols <- Solution[Order1[1:Seq[i]]] %>% purrr::map(ungroup) %>% purrr::reduce(bind_rows) %>% group_by(cellID) %>% summarise(Priority = sqrt(sum(Priority^2)))
RasterSols[[i]] <- Mask
values(RasterSols[[i]])[Sols$cellID] <- Sols$Priority
RasterSols[[i]]/cellStats(RasterSols[[i]], max)
}
plot(RasterSols)
plot(RasterSols[[1]])
plot(RasterSols[[2]])
plot(RasterSols[[3]])
plot(RasterSols[[4]])
plot(RasterSols[[5]])
plot(RasterSols[[6]])
RasterSols <- list()
for(i in 1:length(Seq)){
Sols <- Solution[Order1[1:Seq[i]]] %>% purrr::map(ungroup) %>% purrr::reduce(bind_rows) %>% group_by(cellID) %>% summarise(Priority = sqrt(sum(Priority^2)))
RasterSols[[i]] <- Mask
values(RasterSols[[i]])[Sols$cellID] <- Sols$Priority
RasterSols[[i]] <- RasterSols[[i]]/cellStats(RasterSols[[i]], max)
}
plot(RasterSols[[1]])
plot(RasterSols[[]])
plot(RasterSols[[2])
plot(RasterSols[[2]])
plot(RasterSols[[2]])
plot(RasterSols[[1]])
plot(RasterSols[[2]])
plot(RasterSols[[3]])
plot(RasterSols[[24]])
plot(RasterSols[[25]])
plot(RasterSols[[26]])
plot(RasterSols[[27]])
install.packages(c("animation", "rasterVis"))
install.packages(c("animation", "rasterVis"))
install.packages(c("animation", "rasterVis"))
Mask <- read_rds("RasterSolsandes.rds")
values(Mask) <- ifelse(is.na(values(Mask)), NA, 0)
RasterSols <- list()
for(i in 1:length(Seq)){
Sols <- Solution[Order1[1:Seq[i]]] %>% purrr::map(ungroup) %>% purrr::reduce(bind_rows) %>% group_by(cellID) %>% summarise(Priority = sqrt(sum(Priority^2)))
RasterSols[[i]] <- Mask
values(RasterSols[[i]])[Sols$cellID] <- Sols$Priority
RasterSols[[i]] <- RasterSols[[i]]/cellStats(RasterSols[[i]], max)
}
RasterSols2 <- list()
for(i in 1:length(Seq)){
Sols <- Solution[Order2[1:Seq[i]]] %>% purrr::map(ungroup) %>% purrr::reduce(bind_rows) %>% group_by(cellID) %>% summarise(Priority = sqrt(sum(Priority^2)))
RasterSols2[[i]] <- Mask
values(RasterSols[[i]])[Sols$cellID] <- Sols$Priority
RasterSols2[[i]] <- RasterSols[[i]]/cellStats(RasterSols[[i]], max)
}
RasterSolss <- list()
for(i in 1:length(Seq)){
RasterSolss[[i]] <- stack(RasterSols[[i]], RasterSols2[[i]])
}
rasterVis::levelplot(RasterSolss[[1]])
RasterSols2 <- list()
for(i in 1:length(Seq)){
Sols <- Solution[Order2[1:Seq[i]]] %>% purrr::map(ungroup) %>% purrr::reduce(bind_rows) %>% group_by(cellID) %>% summarise(Priority = sqrt(sum(Priority^2)))
RasterSols2[[i]] <- Mask
values(RasterSols[[i]])[Sols$cellID] <- Sols$Priority
RasterSols2[[i]] <- RasterSols2[[i]]/cellStats(RasterSols2[[i]], max)
}
RasterSolss <- list()
for(i in 1:length(Seq)){
RasterSolss[[i]] <- stack(RasterSols[[i]], RasterSols2[[i]])
}
rasterVis::levelplot(RasterSolss[[1]])
rasterVis::levelplot(RasterSolss[[2]])
plot(RasterSols[[1]])
plot(RasterSols[[2]])
?cellStats
RasterSols <- list()
for(i in 1:length(Seq)){
Sols <- Solution[Order1[1:Seq[i]]] %>% purrr::map(ungroup) %>% purrr::reduce(bind_rows) %>% group_by(cellID) %>% summarise(Priority = sqrt(sum(Priority^2)))
RasterSols[[i]] <- Mask
values(RasterSols[[i]])[Sols$cellID] <- Sols$Priority
RasterSols[[i]] <- RasterSols[[i]]/cellStats(RasterSols[[i]], "max")
}
Plot(RasterSols[[1]])
plot(RasterSols[[1]])
plot(RasterSols[[2]])
plot(RasterSols[[4]])
plot(RasterSols[[27]])
RasterSols2 <- list()
for(i in 1:length(Seq)){
Sols <- Solution[Order2[1:Seq[i]]] %>% purrr::map(ungroup) %>% purrr::reduce(bind_rows) %>% group_by(cellID) %>% summarise(Priority = sqrt(sum(Priority^2)))
RasterSols2[[i]] <- Mask
values(RasterSols[[i]])[Sols$cellID] <- Sols$Priority
RasterSols2[[i]] <- RasterSols2[[i]]/cellStats(RasterSols2[[i]], "max")
}
RasterSolss <- list()
for(i in 1:length(Seq)){
RasterSolss[[i]] <- stack(RasterSols[[i]], RasterSols2[[i]])
}
rasterVis::level}
rasterVis::levelplot(RasterSolss[[1]])
Mask <- read_rds("RasterSolsandes.rds")
values(Mask) <- ifelse(is.na(values(Mask)), NA, 0)
RasterSols <- list()
for(i in 1:length(Seq)){
Sols <- Solution[Order1[1:Seq[i]]] %>% purrr::map(ungroup) %>% purrr::reduce(bind_rows) %>% group_by(cellID) %>% summarise(Priority = sqrt(sum(Priority^2)))
RasterSols[[i]] <- Mask
values(RasterSols[[i]])[Sols$cellID] <- Sols$Priority
RasterSols[[i]] <- RasterSols[[i]]/cellStats(RasterSols[[i]], "max")
}
RasterSols2 <- list()
for(i in 1:length(Seq)){
Sols <- Solution[Order2[1:Seq[i]]] %>% purrr::map(ungroup) %>% purrr::reduce(bind_rows) %>% group_by(cellID) %>% summarise(Priority = sqrt(sum(Priority^2)))
RasterSols2[[i]] <- Mask
values(RasterSols2[[i]])[Sols$cellID] <- Sols$Priority
RasterSols2[[i]] <- RasterSols2[[i]]/cellStats(RasterSols2[[i]], "max")
}
RasterSolss <- list()
for(i in 1:length(Seq)){
RasterSolss[[i]] <- stack(RasterSols[[i]], RasterSols2[[i]])
}
library(rasterVis)
levelplot(RasterSolss[[1]])
RasterSolss <- list()
for(i in 1:length(Seq)){
RasterSolss[[i]] <- stack(RasterSols[[i]], RasterSols2[[i]])
names(RasterSolss[[i]]) <- c("", "")
}
levelplot(RasterSolss[[1]])
RasterSolss <- list()
for(i in 1:length(Seq)){
RasterSolss[[i]] <- stack(RasterSols[[i]], RasterSols2[[i]])
names(RasterSolss[[i]]) <- c("Simul 1", "Simul 2")
}
library(rasterVis)
levelplot(RasterSolss[[1]])
levelplot(RasterSolss[[1]], main= paste(Seq[1], "species"))
library(animation)
saveGIF(for(i in 1:length(Seq)){print(levelplot(RasterSolss[[i]], main= paste(Seq[i], "species")))}, "sequence.gif", ani.width = 1000, ani.height = 700)
getwd
getwd()
saveGIF(for(i in 1:length(Seq)){print(plot(RasterSolss[[i]], main= paste(Seq[i], "species"), legend = F))}, "sequence.gif", ani.width = 1000, ani.height = 700)
saveGIF(for(i in 1:length(Seq)){plot(RasterSolss[[i]], main= paste(Seq[i], "species"), legend = F)}, "sequence.gif", ani.width = 1000, ani.height = 700)
saveGIF(for(i in 1:length(Seq)){plot(RasterSolss[[i]], main= paste(Seq[i], "species"), legend = F, colNA = "black")}, "sequence.gif", ani.width = 1000, ani.height = 700)
runApp('~/ShinyApps/sample-apps/GCM')
32*4*19
pacman::p_load(DiagrammeR, Graphviz)
install.packages("DiagrammeR")
pacman::p_load(DiagrammeR)
pacman::p_load(DiagrammeR)
library(DiagrammeR)
install.packages("stringr")
pacman::p_load(DiagrammeR)
library(DiagrammeR)
shiny::runApp()
devtools::install_github("ewan-keith/shinyShortcut")
shinyShortcut(shinyDirectory = "./Desktop/GitHub/BiomappeR/", OS = .Platform$OS.type,
gitIgnore = FALSE)
library(shinyShortcut)
shinyShortcut(shinyDirectory = "./Desktop/GitHub/BiomappeR/", OS = .Platform$OS.type,
gitIgnore = FALSE)
shinyShortcut(shinyDirectory = "./Desktop/GitHub/BiomappeR/", OS = .Platform$OS.type == "unix",
gitIgnore = FALSE)
shinyShortcut(shinyDirectory = "./Desktop/GitHub/BiomappeR/", OS = "unix",
gitIgnore = FALSE)
shinyShortcut(shinyDirectory = "./Desktop/GitHub/BiomappeR/", OS = "windows",
gitIgnore = FALSE)
install.packages("fields")
n <- 5
m <- 5
d <- 3
x <- matrix(rnorm(n * d), ncol = d)
x
y <- matrix(rnorm(m * d), ncol = d)
x <- matrix(sample(1:10, n * d, replace=F), ncol = d)
n * d
x <- matrix(sample(1:50, 15, replace=F), ncol = d)
x
y <- 2
rdist(x, y
)
library(fields)
rdist(x, y)
y
x
31+43+45
119?2
119/2
dists <- apply(y, 2, function(y) {
colSums((x - y)^2)
})
dists <- apply(y, 2, function(center) {
colSums((x - center)^2)
})
dists <- apply(y, 2, function(center) {
colSums((x - center)^2)
})
data = x
point = y
euc.dist <- function(data, point) {
apply(data, 1, function (row) sqrt(sum((point - row) ^ 2)))
}
euc.dist
euc.dist(x,y)
library(sf) # <- GIS
library(rgdal) # <- GIS
library(raster) # <- GIS
library(ggplot2)
# Set working directory --------------------------------------------------------
setwd("/Volumes/GoogleDrive/Il mio Drive/Simone_SDM")
current.haemo <- raster("./Results/ENSEMBLE_haemobaphes_kfold_20220124/current_ensemble_haemo_total.tif")
current.villo <- raster("./Results/ENSEMBLE_villosus_kfold_20220129/current_ensemble_villo_total.tif")
current.haemo.th <- current.haemo >= 0.7
plot(current.haemo.th)
current.villo.th <- current.villo >= 0.7
plot(current.villo.th)
# UNIAMO I RASTER con alta suitability di entrambe le species
current.calc <- stack(current.haemo.th, current.villo.th)
current.calc <- calc(current.calc, fun = sum)
# calcoliamo percentuali: PRIMA LO CONVERTIAMO IN DATAFRAME
current.calc.1.2 <- as.data.frame(current.calc, xy = TRUE)
current.calc.1.2 <- current.calc.1.2[complete.cases(current.calc.1.2), ]
head(current.calc.1.2)
# percentuale: dividiamo le celle con numero 2 con il totale che sara quello >=1)
(length(which(current.calc.1.2$layer==2))/length(which(current.calc.1.2$layer>=1)))*100
current.haemo <- raster("./Results/ENSEMBLE_haemobaphes_kfold_20220124/ccsm42050_45_ensemble_haemo_total.tif")
current.villo <- raster("./Results/ENSEMBLE_villosus_kfold_20220129/ccsm42050_45_ensemble_villo_total.tif")
# Threshold to 0.7 of SUITABILITY
current.haemo.th <- current.haemo >= 0.7
plot(current.haemo.th)
current.villo.th <- current.villo >= 0.7
plot(current.villo.th)
# UNIAMO I RASTER con alta suitability di entrambe le species
current.calc <- stack(current.haemo.th, current.villo.th)
current.calc <- calc(current.calc, fun = sum)
# calcoliamo percentuali: PRIMA LO CONVERTIAMO IN DATAFRAME
current.calc.1.2 <- as.data.frame(current.calc, xy = TRUE)
current.calc.1.2 <- current.calc.1.2[complete.cases(current.calc.1.2), ]
head(current.calc.1.2)
# percentuale: dividiamo le celle con numero 2 con il totale che sara quello >=1)
(length(which(current.calc.1.2$layer==2))/length(which(current.calc.1.2$layer>=1)))*100
current.haemo <- raster("./Results/ENSEMBLE_haemobaphes_kfold_20220124/ccsm42070_45_ensemble_haemo_total.tif")
current.villo <- raster("./Results/ENSEMBLE_villosus_kfold_20220129/ccsm42070_45_ensemble_villo_total.tif")
# Threshold to 0.7 of SUITABILITY
current.haemo.th <- current.haemo >= 0.7
plot(current.haemo.th)
current.villo.th <- current.villo >= 0.7
plot(current.villo.th)
# UNIAMO I RASTER con alta suitability di entrambe le species
current.calc <- stack(current.haemo.th, current.villo.th)
current.calc <- calc(current.calc, fun = sum)
# calcoliamo percentuali: PRIMA LO CONVERTIAMO IN DATAFRAME
current.calc.1.2 <- as.data.frame(current.calc, xy = TRUE)
current.calc.1.2 <- current.calc.1.2[complete.cases(current.calc.1.2), ]
head(current.calc.1.2)
# percentuale: dividiamo le celle con numero 2 con il totale che sara quello >=1)
(length(which(current.calc.1.2$layer==2))/length(which(current.calc.1.2$layer>=1)))*100
current.haemo <- raster("./Results/ENSEMBLE_haemobaphes_kfold_20220124/ccsm42050_60_ensemble_haemo_total.tif")
current.villo <- raster("./Results/ENSEMBLE_villosus_kfold_20220129/ccsm42050_60_ensemble_villo_total.tif")
# Threshold to 0.7 of SUITABILITY
current.haemo.th <- current.haemo >= 0.7
plot(current.haemo.th)
current.villo.th <- current.villo >= 0.7
plot(current.villo.th)
# UNIAMO I RASTER con alta suitability di entrambe le species
current.calc <- stack(current.haemo.th, current.villo.th)
current.calc <- calc(current.calc, fun = sum)
# calcoliamo percentuali: PRIMA LO CONVERTIAMO IN DATAFRAME
current.calc.1.2 <- as.data.frame(current.calc, xy = TRUE)
current.calc.1.2 <- current.calc.1.2[complete.cases(current.calc.1.2), ]
head(current.calc.1.2)
# percentuale: dividiamo le celle con numero 2 con il totale che sara quello >=1)
(length(which(current.calc.1.2$layer==2))/length(which(current.calc.1.2$layer>=1)))*100
current.haemo <- raster("./Results/ENSEMBLE_haemobaphes_kfold_20220124/ccsm42070_60_ensemble_haemo_total.tif")
current.villo <- raster("./Results/ENSEMBLE_villosus_kfold_20220129/ccsm42070_60_ensemble_villo_total.tif")
# Threshold to 0.7 of SUITABILITY
current.haemo.th <- current.haemo >= 0.7
plot(current.haemo.th)
current.villo.th <- current.villo >= 0.7
plot(current.villo.th)
# UNIAMO I RASTER con alta suitability di entrambe le species
current.calc <- stack(current.haemo.th, current.villo.th)
current.calc <- calc(current.calc, fun = sum)
# calcoliamo percentuali: PRIMA LO CONVERTIAMO IN DATAFRAME
current.calc.1.2 <- as.data.frame(current.calc, xy = TRUE)
current.calc.1.2 <- current.calc.1.2[complete.cases(current.calc.1.2), ]
head(current.calc.1.2)
# percentuale: dividiamo le celle con numero 2 con il totale che sara quello >=1)
(length(which(current.calc.1.2$layer==2))/length(which(current.calc.1.2$layer>=1)))*100
# Set working directory --------------------------------------------------------
setwd("/Volumes/GoogleDrive/Il mio Drive/Simone_SDM")
current.haemo <- raster("./Results/ENSEMBLE_haemobaphes_kfold_20220124/current_ensemble_haemo_total.tif")
current.villo <- raster("./Results/ENSEMBLE_villosus_kfold_20220129/current_ensemble_villo_total.tif")
current.haemo.th <- current.haemo >= 0.7
plot(current.haemo.th)
current.villo.th <- current.villo >= 0.7
plot(current.villo.th)
current.haemo.th <- current.haemo >= 0.7
plot(current.haemo.th)
current.villo.th <- current.villo >= 0.7
plot(current.villo.th)
current.haemo <- raster("./Results/ENSEMBLE_haemobaphes_kfold_20220124/current_ensemble_haemo_total.tif")
current.villo <- raster("./Results/ENSEMBLE_villosus_kfold_20220129/current_ensemble_villo_total.tif")
# Threshold to 0.7 of SUITABILITY
current.haemo.th <- current.haemo >= 0.7
plot(current.haemo.th)
current.villo.th <- current.villo >= 0.7
plot(current.villo.th)
current.calc <- stack(current.haemo.th, current.villo.th)
current.calc
current.haemo.df <- as.data.frame(current.haemo.th, xy = TRUE)
head(current.haemo.df)
current.haemo.df <- current.haemo.df[complete.cases(current.haemo.df), ]
head(current.haemo.df)
View(current.haemo.df)
length(which(current.haemo.df$layer == 1))
current.villo.df <- as.data.frame(current.villo.th, xy = TRUE)
current.villo.df <- current.villo.df[complete.cases(current.villo.df), ]
length(which(current.villo.df$layer == 1))
current.haemo <- raster("./Results/ENSEMBLE_haemobaphes_kfold_20220124/ccsm42050_45_ensemble_haemo_total.tif")
current.villo <- raster("./Results/ENSEMBLE_villosus_kfold_20220129/ccsm42050_45_ensemble_villo_total.tif")
# Threshold to 0.7 of SUITABILITY
current.haemo.th <- current.haemo >= 0.7
current.villo.th <- current.villo >= 0.7
current.haemo.df <- as.data.frame(current.haemo.th, xy = TRUE)
current.haemo.df <- current.haemo.df[complete.cases(current.haemo.df), ]
length(which(current.haemo.df$layer == 1))
current.villo.df <- as.data.frame(current.villo.th, xy = TRUE)
current.villo.df <- current.villo.df[complete.cases(current.villo.df), ]
length(which(current.villo.df$layer == 1))
current.haemo <- raster("./Results/ENSEMBLE_haemobaphes_kfold_20220124/ccsm42070_45_ensemble_haemo_total.tif")
current.villo <- raster("./Results/ENSEMBLE_villosus_kfold_20220129/ccsm42070_45_ensemble_villo_total.tif")
# Threshold to 0.7 of SUITABILITY
current.haemo.th <- current.haemo >= 0.7
current.villo.th <- current.villo >= 0.7
current.haemo.df <- as.data.frame(current.haemo.th, xy = TRUE)
current.haemo.df <- current.haemo.df[complete.cases(current.haemo.df), ]
length(which(current.haemo.df$layer == 1))
current.villo.df <- as.data.frame(current.villo.th, xy = TRUE)
current.villo.df <- current.villo.df[complete.cases(current.villo.df), ]
length(which(current.villo.df$layer == 1))
current.haemo <- raster("./Results/ENSEMBLE_haemobaphes_kfold_20220124/ccsm42050_60_ensemble_haemo_total.tif")
current.villo <- raster("./Results/ENSEMBLE_villosus_kfold_20220129/ccsm42050_60_ensemble_villo_total.tif")
current.haemo.th <- current.haemo >= 0.7
current.villo.th <- current.villo >= 0.7
current.haemo.df <- as.data.frame(current.haemo.th, xy = TRUE)
current.haemo.df <- current.haemo.df[complete.cases(current.haemo.df), ]
length(which(current.haemo.df$layer == 1))
current.villo.df <- as.data.frame(current.villo.th, xy = TRUE)
current.villo.df <- current.villo.df[complete.cases(current.villo.df), ]
length(which(current.villo.df$layer == 1))
current.haemo <- raster("./Results/ENSEMBLE_haemobaphes_kfold_20220124/ccsm42070_60_ensemble_haemo_total.tif")
current.villo <- raster("./Results/ENSEMBLE_villosus_kfold_20220129/ccsm42070_60_ensemble_villo_total.tif")
# Threshold to 0.7 of SUITABILITY
current.haemo.th <- current.haemo >= 0.7
current.villo.th <- current.villo >= 0.7
current.haemo.df <- as.data.frame(current.haemo.th, xy = TRUE)
current.haemo.df <- current.haemo.df[complete.cases(current.haemo.df), ]
length(which(current.haemo.df$layer == 1))
current.villo.df <- as.data.frame(current.villo.th, xy = TRUE)
current.villo.df <- current.villo.df[complete.cases(current.villo.df), ]
length(which(current.villo.df$layer == 1))
shiny::runApp('Desktop/GitHub/BiomappeR')
shiny::runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
