points(d0, fac * (rr0 - 1) + 1, pch = 8, cex = 1.2 +
(i - 1) * 0.6, col = "white")
}
Sys.sleep(2 * t)
y <- 1.17
messaux <- paste("Merry Xmas Super STE!!")
text(x = as.Date(paste(year, "12-28", sep = "-")), y = y,
labels = messaux, vfont = myvfont, cex = 2.5, col = "red")
}
xmasregression(year = 2021, time = 5)
xmasregression <- function (year = 2021, time = 12, seed = NULL)
{
if (!inherits(year, c("numeric", "integer")) || length(year) !=
1L)
stop("'year' must be a number")
if (!inherits(time, c("numeric", "integer")) || length(time) !=
1L || time <= 0)
stop("'time' must be a positive number")
if (!is.null(seed) & (is.na(seed) || !is(seed, "numeric")))
stop("'seed' must be numeric or NULL")
if (!is.null(seed))
set.seed(seed)
t <- time/26
if (!is.null(seed))
set.seed(seed)
dm1 <- paste(12, 20:31, sep = "-")
dm2 <- paste("01", paste0(0, 1:8), sep = "-")
dm <- c(dm1, dm2)
nd <- length(dm)
rr <- runif(n = nd, min = 0.999, 1.001)
rr[dm == "12-24"] <- rr[dm == "12-24"] + 0.03
rr[dm == "12-25"] <- rr[dm == "12-25"] + 0.07
rr[dm == "12-26"] <- rr[dm == "12-26"] + 0.05
rr[dm == "12-31"] <- rr[dm == "12-31"] + 0.1
rr[dm == "01-01"] <- rr[dm == "01-01"] + 0.12
rr[dm == "01-06"] <- rr[dm == "01-06"] + 0.07
d <- as.Date(c(paste(year - 1, dm1, sep = "-"), paste(year,
dm2, sep = "-")))
#newwindow()
dev.new()
op <- par(las = 1, cex.main = 1.5, col.main = "blue")
on.exit(par(op))
op
xl <- paste("Date")
yl <- paste("Drunk risk")
plot(d, rr, xlab = xl, ylab = yl, type = "n", ylim = c(1, 1.2), xaxt = "n")
axis(1, at = d, labels = FALSE)
text(d, par("usr")[3] - 0.01, labels = format(d, "%d/%m/%y"),
srt = 45, adj = 1, xpd = TRUE, cex = 0.7)
Sys.sleep(0.5 * t)
for (i in 1:length(d)) {
Sys.sleep(0.4 * t)
points(d[i], rr[i], col = "gray", pch = 19)
}
Sys.sleep(1.5 * t)
myvfont <- c("serif", "bold")
text(mean(d), 1.22, labels = "Xmas  model",
col = "blue", xpd = TRUE, cex = 1.4, vfont = myvfont)
Sys.sleep(1.5 * t)
sels <- list(c("12-23", "12-24", "12-25", "12-26", "12-27"),
c("12-30", "12-31", "01-01", "01-02"), c("01-05", "01-06",
"01-07"))
for (i in 1:length(sels)) {
sel <- dm %in% sels[[i]]
d2 <- d[sel]
rr2 <- rr[sel]
rr2[rr2 < 1] <- 1
polygon(d2, rr2, border = NULL, col = "forestgreen")
Sys.sleep(t)
}
sel0 <- dm %in% c("12-24", "12-25", "12-26", "12-31", "01-01",
"01-06")
d0 <- d[sel0]
rr0 <- rr[sel0]
for (i in 1:length(sel0)) {
points(d0[i], rr0[i], pch = 19, col = "red", cex = 3)
Sys.sleep(0.4 * t)
}
for (i in 1:2) {
fac <- runif(n = length(d0), min = 0.1, max = 0.9)
points(d0, fac * (rr0 - 1) + 1, pch = 8, cex = 1.2 +
(i - 1) * 0.6, col = "white")
}
Sys.sleep(2 * t)
y <- 1.17
messaux <- paste("Merry Xmas Super STE!!")
text(x = as.Date(paste(year-.01, "12-28", sep = "-")), y = y,
labels = messaux, vfont = myvfont, cex = 2.5, col = "red")
}
xmasregression(year = 2021, time = 5)
xmasregression <- function (year = 2022, time = 12, seed = NULL)
{
if (!inherits(year, c("numeric", "integer")) || length(year) !=
1L)
stop("'year' must be a number")
if (!inherits(time, c("numeric", "integer")) || length(time) !=
1L || time <= 0)
stop("'time' must be a positive number")
if (!is.null(seed) & (is.na(seed) || !is(seed, "numeric")))
stop("'seed' must be numeric or NULL")
if (!is.null(seed))
set.seed(seed)
t <- time/26
if (!is.null(seed))
set.seed(seed)
dm1 <- paste(12, 20:31, sep = "-")
dm2 <- paste("01", paste0(0, 1:8), sep = "-")
dm <- c(dm1, dm2)
nd <- length(dm)
rr <- runif(n = nd, min = 0.999, 1.001)
rr[dm == "12-24"] <- rr[dm == "12-24"] + 0.03
rr[dm == "12-25"] <- rr[dm == "12-25"] + 0.07
rr[dm == "12-26"] <- rr[dm == "12-26"] + 0.05
rr[dm == "12-31"] <- rr[dm == "12-31"] + 0.1
rr[dm == "01-01"] <- rr[dm == "01-01"] + 0.12
rr[dm == "01-06"] <- rr[dm == "01-06"] + 0.07
d <- as.Date(c(paste(year - 1, dm1, sep = "-"), paste(year,
dm2, sep = "-")))
#newwindow()
dev.new()
op <- par(las = 1, cex.main = 1.5, col.main = "blue")
on.exit(par(op))
op
xl <- paste("Date")
yl <- paste("Drunk risk")
plot(d, rr, xlab = xl, ylab = yl, type = "n", ylim = c(1, 1.2), xaxt = "n")
axis(1, at = d, labels = FALSE)
text(d, par("usr")[3] - 0.01, labels = format(d, "%d/%m/%y"),
srt = 45, adj = 1, xpd = TRUE, cex = 0.7)
Sys.sleep(0.5 * t)
for (i in 1:length(d)) {
Sys.sleep(0.4 * t)
points(d[i], rr[i], col = "gray", pch = 19)
}
Sys.sleep(1.5 * t)
myvfont <- c("serif", "bold")
text(mean(d), 1.22, labels = "Xmas  model",
col = "blue", xpd = TRUE, cex = 1.4, vfont = myvfont)
Sys.sleep(1.5 * t)
sels <- list(c("12-23", "12-24", "12-25", "12-26", "12-27"),
c("12-30", "12-31", "01-01", "01-02"), c("01-05", "01-06",
"01-07"))
for (i in 1:length(sels)) {
sel <- dm %in% sels[[i]]
d2 <- d[sel]
rr2 <- rr[sel]
rr2[rr2 < 1] <- 1
polygon(d2, rr2, border = NULL, col = "forestgreen")
Sys.sleep(t)
}
sel0 <- dm %in% c("12-24", "12-25", "12-26", "12-31", "01-01",
"01-06")
d0 <- d[sel0]
rr0 <- rr[sel0]
for (i in 1:length(sel0)) {
points(d0[i], rr0[i], pch = 19, col = "red", cex = 3)
Sys.sleep(0.4 * t)
}
for (i in 1:2) {
fac <- runif(n = length(d0), min = 0.1, max = 0.9)
points(d0, fac * (rr0 - 1) + 1, pch = 8, cex = 1.2 +
(i - 1) * 0.6, col = "white")
}
Sys.sleep(2 * t)
y <- 1.17
messaux <- paste("Merry Xmas Super STE!!")
text(x = as.Date(paste(year - 1, "12-28", sep = "-")), y = y,
labels = messaux, vfont = myvfont, cex = 2.5, col = "red")
}
xmasregression(time = 5)
xmassnowkoch(year = 2013, seed = NULL)
xmassnowkoch
xmassnowkoch(year = 2013, seed = NULL)
xmassnowkoch <- function (seed = NULL)
{  if (!is.null(seed) & (is.na(seed) || !is(seed, "numeric")))
stop("'seed' must be numeric or NULL")
if (!is.null(seed))
set.seed(seed)
mcex <- 1.8
nsnowflakes <- 40
colors <- rainbow(n = 100, start = 0.5, end = 0.65)
message <- c("Merry", "Xmas", "ALE!")
messagecol <- sample(c("red", "forestgreen", "white"), size = 3,
replace = FALSE)
#newwindow()
dev.new()
plot(c(-10, 10), c(-10, 10), type = "n", asp = 1, axes = F,
xlab = "", ylab = "")
centers <- koch(niter = 1, size = 9, rotate = runif(1, 0,
pi/3))
for (i in 1:nsnowflakes) polygon(randomkoch(), border = NA,
col = colors[sample(1:100)])
for (i in 1:3) {
Sys.sleep(1)
polygon(koch(size = 8, centerX = centers[i, 1], centerY = centers[i,
2], rotate = runif(1, 0, pi/3)), border = "blue",
col = colors[sample(1:20)], lwd = 2)
}
for (i in 1:3) {
Sys.sleep(1)
text(centers[i, 1], centers[i, 2] + 0.6, message[i],
col = messagecol[i], cex = mcex, family = "serif")
text(centers[i, 1], centers[i, 2] - 0.6, col = messagecol[i], cex = mcex,
family = "serif")
}
}
xmassnowkoch(seed = NULL)
koch
koch()
library("christmas")
xmassnowkoch <- function (seed = NULL)
{  if (!is.null(seed) & (is.na(seed) || !is(seed, "numeric")))
stop("'seed' must be numeric or NULL")
if (!is.null(seed))
set.seed(seed)
mcex <- 1.8
nsnowflakes <- 40
colors <- rainbow(n = 100, start = 0.5, end = 0.65)
message <- c("Merry", "Xmas", "ALE!")
messagecol <- sample(c("red", "forestgreen", "white"), size = 3,
replace = FALSE)
#newwindow()
dev.new()
plot(c(-10, 10), c(-10, 10), type = "n", asp = 1, axes = F,
xlab = "", ylab = "")
centers <- koch(niter = 1, size = 9, rotate = runif(1, 0,
pi/3))
for (i in 1:nsnowflakes) polygon(randomkoch(), border = NA,
col = colors[sample(1:100)])
for (i in 1:3) {
Sys.sleep(1)
polygon(koch(size = 8, centerX = centers[i, 1], centerY = centers[i,
2], rotate = runif(1, 0, pi/3)), border = "blue",
col = colors[sample(1:20)], lwd = 2)
}
for (i in 1:3) {
Sys.sleep(1)
text(centers[i, 1], centers[i, 2] + 0.6, message[i],
col = messagecol[i], cex = mcex, family = "serif")
text(centers[i, 1], centers[i, 2] - 0.6, col = messagecol[i], cex = mcex,
family = "serif")
}
}
xmassnowkoch(seed = NULL)
library("animation")
library("grDevices")
library("graphics")
library("stats")
library("methods")
xmasregression <- function (year = 2022, time = 12, seed = NULL)
{
if (!inherits(year, c("numeric", "integer")) || length(year) !=
1L)
stop("'year' must be a number")
if (!inherits(time, c("numeric", "integer")) || length(time) !=
1L || time <= 0)
stop("'time' must be a positive number")
if (!is.null(seed) & (is.na(seed) || !is(seed, "numeric")))
stop("'seed' must be numeric or NULL")
if (!is.null(seed))
set.seed(seed)
t <- time/26
if (!is.null(seed))
set.seed(seed)
dm1 <- paste(12, 20:31, sep = "-")
dm2 <- paste("01", paste0(0, 1:8), sep = "-")
dm <- c(dm1, dm2)
nd <- length(dm)
rr <- runif(n = nd, min = 0.999, 1.001)
rr[dm == "12-24"] <- rr[dm == "12-24"] + 0.03
rr[dm == "12-25"] <- rr[dm == "12-25"] + 0.07
rr[dm == "12-26"] <- rr[dm == "12-26"] + 0.05
rr[dm == "12-31"] <- rr[dm == "12-31"] + 0.1
rr[dm == "01-01"] <- rr[dm == "01-01"] + 0.12
rr[dm == "01-06"] <- rr[dm == "01-06"] + 0.07
d <- as.Date(c(paste(year - 1, dm1, sep = "-"), paste(year,
dm2, sep = "-")))
#newwindow()
dev.new()
op <- par(las = 1, cex.main = 1.5, col.main = "blue")
on.exit(par(op))
op
xl <- paste("Date")
yl <- paste("Drunk risk")
plot(d, rr, xlab = xl, ylab = yl, type = "n", ylim = c(1, 1.2), xaxt = "n")
axis(1, at = d, labels = FALSE)
text(d, par("usr")[3] - 0.01, labels = format(d, "%d/%m/%y"),
srt = 45, adj = 1, xpd = TRUE, cex = 0.7)
Sys.sleep(0.5 * t)
for (i in 1:length(d)) {
Sys.sleep(0.4 * t)
points(d[i], rr[i], col = "gray", pch = 19)
}
Sys.sleep(1.5 * t)
myvfont <- c("serif", "bold")
text(mean(d), 1.22, labels = "Xmas  model",
col = "blue", xpd = TRUE, cex = 1.4, vfont = myvfont)
Sys.sleep(1.5 * t)
sels <- list(c("12-23", "12-24", "12-25", "12-26", "12-27"),
c("12-30", "12-31", "01-01", "01-02"), c("01-05", "01-06",
"01-07"))
for (i in 1:length(sels)) {
sel <- dm %in% sels[[i]]
d2 <- d[sel]
rr2 <- rr[sel]
rr2[rr2 < 1] <- 1
polygon(d2, rr2, border = NULL, col = "forestgreen")
Sys.sleep(t)
}
sel0 <- dm %in% c("12-24", "12-25", "12-26", "12-31", "01-01",
"01-06")
d0 <- d[sel0]
rr0 <- rr[sel0]
for (i in 1:length(sel0)) {
points(d0[i], rr0[i], pch = 19, col = "red", cex = 3)
Sys.sleep(0.4 * t)
}
for (i in 1:2) {
fac <- runif(n = length(d0), min = 0.1, max = 0.9)
points(d0, fac * (rr0 - 1) + 1, pch = 8, cex = 1.2 +
(i - 1) * 0.6, col = "white")
}
Sys.sleep(2 * t)
y <- 1.17
messaux <- paste("Merry Xmas ALE!!")
text(x = as.Date(paste(year - 1, "12-28", sep = "-")), y = y,
labels = messaux, vfont = myvfont, cex = 2.5, col = "red")
}
# Please run two times!!!!!!
xmasregression(time = 5)
shiny::runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
shiny::runApp('Desktop/biomonitoR_app/biomonitoR_app')
show_scores(index = "bioco")
fluidRow(
column(width = 4,
box(width = NULL, solidHeader = TRUE,
HTML("<h3> <b>Biomonitoring Indices</b> </h3>
This panel ...")),
box(width = NULL, solidHeader = TRUE,
HTML("What do you want to calculate?"),
checkboxInput("biocoIndex", label = "Biocontamination (SBCI), abundance contamination (ACI), and richness contamination index (RCI)", value = FALSE), # <- BIOCO
checkboxInput("bmwpIndex", label = "Biological Monitoring Working Party (BMWP)", value = FALSE), # <- BWMP
checkboxInput("asptIndex", label = "Average Score Per Taxon (ASPT)", value = FALSE), # <- ASPT
checkboxInput("psiIndex", label = "Proportion of Sediment-sensitive Invertebrates index (PSI)", value = FALSE), # <- psi
checkboxInput("epsiIndex", label = "Empyrically-weighted Proportion of Sediment-sensitive Invertebrates (ePSI)", value = FALSE), # <- epsi
checkboxInput("eptIndex", label = "EPT richness", value = FALSE), # <- ept
checkboxInput("eptdIndex", label = "log10 of selected EPTD", value = FALSE), # <- eptd
checkboxInput("goldIndex", label = "1 - GOLD", value = FALSE), # <- gold
checkboxInput("lifeIndex", label = "Life Index", value = FALSE), # <- life
checkboxInput("whptIndex", label = "Whalley Hawkes Paisley Trigg", value = FALSE) # <- whpt
)
),
column(width = 8,
# bioco ----
conditionalPanel("input.biocoIndex == 1",
box(width = NULL, solidHeader = TRUE,
HTML("<h3> Biocontamination (SBCI), abundance contamination (ACI), and richness contamination index (RCI) </h3>"),
HTML("This function provides site-specific biocontamination index (SBCI),
abundance contamination index (ACI) and richness contamination index (RCI)
at family rank according to those proposed by Arbaciauskas et al. (2008)."),
tags$hr(),
selectizeInput("biocoAlien", "Select alien species to calculate the index",
choices = NULL, multiple = TRUE),
radioButtons("biocoRefdf", "", choiceNames = c("Macroinvertebrate", "Macrophyte", "Custom"),
choiceValues = c("mi", "mf", "cu"), selected = "mi", inline = TRUE),
DTOutput("tbl_bioco"),
uiOutput("download_bioco")
)
),
# bwmp ----
conditionalPanel("input.bmwpIndex == 1",
box(width = NULL, solidHeader = TRUE,
HTML("<h3> Biological Monitoring Working Party (BMWP) </h3>"),
HTML("This function calculates the Biological Monitoring Working Party index
following Armitage et al. (1983), Davy-Bowker et al. (2007) and
Alba-Tercedor & Sanchez-Ortega (1988) implementations."),
tags$hr(),
column(6,
radioButtons("bmwp_method", "To calculate diversity indices, please select the implementation method.", choiceNames = c("Armitage", "UK-davy-bowker", "ES-magrama", "IT-buffagni"),
choiceValues = c("a", "uk", "spa", "ita"), selected = "a", inline = TRUE),
HTML("<b> Taxa aggregation </b>"),
checkboxInput("bmwpAgg", label = "Aggregation", value = FALSE)), # <- agg parameter of BWMP
column(6,HTML("<b> BMWP score </b>"),
checkboxInput("bmwpScore", "Show the BMWP score", value = FALSE),
radioButtons("bmwp_methodScore", "Method", choiceNames = c("Armitage", "UK-davy-bowker", "ES-magrama", "IT-buffagni"),
choiceValues = c("armitage", "uk", "spa", "ita"), selected = NULL, inline = TRUE)),
#checkboxInput("bmwpTrace", label = "Trace", value = FALSE), # <- traceB parameter of BWMP
selectizeInput("bmwpExceptions", "Select taxa to exclude from the index calculation",
choices = NULL, multiple = TRUE),
DTOutput("tbl_bmwp"),
uiOutput("download_bmwp"),
DTOutput("tbl_bmwpScore")
)
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
fluidRow(
column(width = 4,
box(width = NULL, solidHeader = TRUE,
HTML("<h3> <b>Biomonitoring Indices</b> </h3>
This panel ...")),
box(width = NULL, solidHeader = TRUE,
HTML("What do you want to calculate?"),
checkboxInput("biocoIndex", label = "Biocontamination (SBCI), abundance contamination (ACI), and richness contamination index (RCI)", value = FALSE), # <- BIOCO
checkboxInput("bmwpIndex", label = "Biological Monitoring Working Party (BMWP)", value = FALSE), # <- BWMP
checkboxInput("asptIndex", label = "Average Score Per Taxon (ASPT)", value = FALSE), # <- ASPT
checkboxInput("psiIndex", label = "Proportion of Sediment-sensitive Invertebrates index (PSI)", value = FALSE), # <- psi
checkboxInput("epsiIndex", label = "Empyrically-weighted Proportion of Sediment-sensitive Invertebrates (ePSI)", value = FALSE), # <- epsi
checkboxInput("eptIndex", label = "EPT richness", value = FALSE), # <- ept
checkboxInput("eptdIndex", label = "log10 of selected EPTD", value = FALSE), # <- eptd
checkboxInput("goldIndex", label = "1 - GOLD", value = FALSE), # <- gold
checkboxInput("lifeIndex", label = "Life Index", value = FALSE), # <- life
checkboxInput("whptIndex", label = "Whalley Hawkes Paisley Trigg", value = FALSE) # <- whpt
)
),
column(width = 8,
# bioco ----
conditionalPanel("input.biocoIndex == 1",
box(width = NULL, solidHeader = TRUE,
HTML("<h3> Biocontamination (SBCI), abundance contamination (ACI), and richness contamination index (RCI) </h3>"),
HTML("This function provides site-specific biocontamination index (SBCI),
abundance contamination index (ACI) and richness contamination index (RCI)
at family rank according to those proposed by Arbaciauskas et al. (2008)."),
tags$hr(),
selectizeInput("biocoAlien", "Select alien species to calculate the index",
choices = NULL, multiple = TRUE),
radioButtons("biocoRefdf", "", choiceNames = c("Macroinvertebrate", "Macrophyte", "Custom"),
choiceValues = c("mi", "mf", "cu"), selected = "mi", inline = TRUE),
DTOutput("tbl_bioco"),
uiOutput("download_bioco")
)
),
# bwmp ----
conditionalPanel("input.bmwpIndex == 1",
box(width = NULL, solidHeader = TRUE,
HTML("<h3> Biological Monitoring Working Party (BMWP) </h3>"),
HTML("This function calculates the Biological Monitoring Working Party index
following Armitage et al. (1983), Davy-Bowker et al. (2007) and
Alba-Tercedor & Sanchez-Ortega (1988) implementations."),
tags$hr(),
column(6,
radioButtons("bmwp_method", "To calculate diversity indices, please select the implementation method.", choiceNames = c("Armitage", "UK-davy-bowker", "ES-magrama", "IT-buffagni"),
choiceValues = c("a", "uk", "spa", "ita"), selected = "a", inline = TRUE),
HTML("<b> Taxa aggregation </b>"),
checkboxInput("bmwpAgg", label = "Aggregation", value = FALSE)), # <- agg parameter of BWMP
column(6,HTML("<b> BMWP score </b>"),
checkboxInput("bmwpScore", "Show the BMWP score", value = FALSE),
radioButtons("bmwp_methodScore", "Method", choiceNames = c("Armitage", "UK-davy-bowker", "ES-magrama", "IT-buffagni"),
choiceValues = c("armitage", "uk", "spa", "ita"), selected = NULL, inline = TRUE)),
#checkboxInput("bmwpTrace", label = "Trace", value = FALSE), # <- traceB parameter of BWMP
selectizeInput("bmwpExceptions", "Select taxa to exclude from the index calculation",
choices = NULL, multiple = TRUE),
DTOutput("tbl_bmwp"),
uiOutput("download_bmwp"),
DTOutput("tbl_bmwpScore")
)
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
show_scores(index = "psi", method = "spa")$scores
show_scores(index = "psi")$scores
show_scores(index = "psi", method = "extence")$scores
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
show_scores(index = "epsi", method = "uk")
show_scores(index = "epsi", method = "uk")$scores
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
vignette("functional", package = "biomonitoR")
data(macro_ex)
data_bio <- as_biomonitor(macro_ex)
data_agr <- aggregate_taxa(data_bio)
data_ts <- assign_traits(data_agr)
data_ts
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
data_ts <- assign_traits(data_agr, filter_by_distance = NULL)
data_ts
data_ts <- assign_traits(data_agr, filter_by_distance = "pos")
data_ts
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
data_ts
round(data_ts)
round(data_ts[, 5:ncol(data_ts)])
runApp('Desktop/biomonitoR_app/biomonitoR_app')
data.frame(lapply(data_ts, function(y) if(is.numeric(y)) round(y, 2) else y))
lapply(data_ts, function(y) if(is.numeric(y)) round(y, 2) else y)
runApp('Desktop/biomonitoR_app/biomonitoR_app')
