polygon(koch(size = 8, centerX = centers[i, 1], centerY = centers[i,
2], rotate = runif(1, 0, pi/3)), border = "blue",
col = colors[sample(1:20)], lwd = 2)
}
for (i in 1:3) {
Sys.sleep(1)
text(centers[i, 1], centers[i, 2] + 0.6, message[i],
col = messagecol[i], cex = mcex, family = "serif")
text(centers[i, 1], centers[i, 2] - 0.6, col = messagecol[i], cex = mcex,
family = "serif")
}
}
xmassnowkoch(seed = NULL)
library("animation")
library("grDevices")
library("graphics")
library("stats")
library("methods")
xmasregression <- function (year = 2022, time = 12, seed = NULL)
{
if (!inherits(year, c("numeric", "integer")) || length(year) !=
1L)
stop("'year' must be a number")
if (!inherits(time, c("numeric", "integer")) || length(time) !=
1L || time <= 0)
stop("'time' must be a positive number")
if (!is.null(seed) & (is.na(seed) || !is(seed, "numeric")))
stop("'seed' must be numeric or NULL")
if (!is.null(seed))
set.seed(seed)
t <- time/26
if (!is.null(seed))
set.seed(seed)
dm1 <- paste(12, 20:31, sep = "-")
dm2 <- paste("01", paste0(0, 1:8), sep = "-")
dm <- c(dm1, dm2)
nd <- length(dm)
rr <- runif(n = nd, min = 0.999, 1.001)
rr[dm == "12-24"] <- rr[dm == "12-24"] + 0.03
rr[dm == "12-25"] <- rr[dm == "12-25"] + 0.07
rr[dm == "12-26"] <- rr[dm == "12-26"] + 0.05
rr[dm == "12-31"] <- rr[dm == "12-31"] + 0.1
rr[dm == "01-01"] <- rr[dm == "01-01"] + 0.12
rr[dm == "01-06"] <- rr[dm == "01-06"] + 0.07
d <- as.Date(c(paste(year - 1, dm1, sep = "-"), paste(year,
dm2, sep = "-")))
#newwindow()
dev.new()
op <- par(las = 1, cex.main = 1.5, col.main = "blue")
on.exit(par(op))
op
xl <- paste("Date")
yl <- paste("Drunk risk")
plot(d, rr, xlab = xl, ylab = yl, type = "n", ylim = c(1, 1.2), xaxt = "n")
axis(1, at = d, labels = FALSE)
text(d, par("usr")[3] - 0.01, labels = format(d, "%d/%m/%y"),
srt = 45, adj = 1, xpd = TRUE, cex = 0.7)
Sys.sleep(0.5 * t)
for (i in 1:length(d)) {
Sys.sleep(0.4 * t)
points(d[i], rr[i], col = "gray", pch = 19)
}
Sys.sleep(1.5 * t)
myvfont <- c("serif", "bold")
text(mean(d), 1.22, labels = "Xmas  model",
col = "blue", xpd = TRUE, cex = 1.4, vfont = myvfont)
Sys.sleep(1.5 * t)
sels <- list(c("12-23", "12-24", "12-25", "12-26", "12-27"),
c("12-30", "12-31", "01-01", "01-02"), c("01-05", "01-06",
"01-07"))
for (i in 1:length(sels)) {
sel <- dm %in% sels[[i]]
d2 <- d[sel]
rr2 <- rr[sel]
rr2[rr2 < 1] <- 1
polygon(d2, rr2, border = NULL, col = "forestgreen")
Sys.sleep(t)
}
sel0 <- dm %in% c("12-24", "12-25", "12-26", "12-31", "01-01",
"01-06")
d0 <- d[sel0]
rr0 <- rr[sel0]
for (i in 1:length(sel0)) {
points(d0[i], rr0[i], pch = 19, col = "red", cex = 3)
Sys.sleep(0.4 * t)
}
for (i in 1:2) {
fac <- runif(n = length(d0), min = 0.1, max = 0.9)
points(d0, fac * (rr0 - 1) + 1, pch = 8, cex = 1.2 +
(i - 1) * 0.6, col = "white")
}
Sys.sleep(2 * t)
y <- 1.17
messaux <- paste("Merry Xmas ALE!!")
text(x = as.Date(paste(year - 1, "12-28", sep = "-")), y = y,
labels = messaux, vfont = myvfont, cex = 2.5, col = "red")
}
# Please run two times!!!!!!
xmasregression(time = 5)
shiny::runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
elevation <- raster::raster("./Desktop/CHELSAcruts_prec_10_1901_V.1.0.tif")
plot(elevation)
library(sp)
elevation <- raster::raster("./Desktop/CHELSAcruts_prec_10_1901_V.1.0.tif")
plot(elevation)
View(aspt_acc_fam_ita)
View(mf_ref)
View(mi_ref)
View(traitsTachet)
load("/Volumes/PHILIPS UFD/biomonitoR/sysdata.rda")
write.csv(traitsTachet, "./Desktop/traitTachet.csv", row.names = F)
shiny::runApp('Desktop/biomonitoR_app/biomonitoR_app')
data(macro_ex)
data_bio <- as_biomonitor(macro_ex)
data_agr <- aggregate_taxa(data_bio)
data_ts <- assign_traits(data_agr)
shiny::runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
data_bio <- as_biomonitor(macro_ex)
data_agr <- aggregate_taxa(data_bio)
data_ts <- assign_traits(data_agr)
data_ts_av <- average_traits(data_ts)
col_blocks <- c(8, 7, 3, 9, 4, 3, 6, 2, 5, 3, 9, 8, 8, 5, 7, 5, 4, 4, 2, 3, 8)
f_disp(data_agr, trait_db = data_ts_av, type = "F", col_blocks = col_blocks)
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
shiny::runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
data(macro_ex)
data_bio <- as_biomonitor(macro_ex)
data_agr <- aggregate_taxa(data_bio)
data_ts <- assign_traits(data_agr)
data_ts_av <- average_traits(data_ts)
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
fluidRow(
##############
# Right side #
##############
column(width = 4,
box(width = NULL, solidHeader = TRUE,
HTML("<h3> <b>Functional Indices</b> </h3>
This panel ...")),
box(width = NULL, solidHeader = TRUE,
#HTML("What do you want to calculate?"),
checkboxInput("funDisp", label = "Functional dispersion", value = FALSE), # Functional dispersion
checkboxGroupInput("funDispLev", "Taxa level", choiceNames = c("Family", "Genus", "Species", "Taxa"),
choiceValues = c("Family", "Genus", "Species", "Taxa"), selected = "Taxa", inline = TRUE),
checkboxGroupInput("funDispType", "Variable type", choiceNames = c("Fuzzy", "Continuous"),
choiceValues = c("F", "C"), selected = "F", inline = TRUE),
checkboxInput("traitSelDisp", label = "Trait selection", value = FALSE),
# col_blocks
textInput("nbdimDisp", "Multispace dimension", 2),
selectInput("distanceDisp", "Functional distance",
choices = c("Euclidean" = "euclidean",
"Gower" = "gower"),
selected = "euclidean", multiple = FALSE),
checkboxInput("traitSelDisp", label = "Trait selection", value = FALSE),
checkboxInput("zerodist_rmDisp", label = "Zero distance", value = FALSE),
selectInput("correctionDisp", "Correction method",
choices = c("None" = "none",
"Lingoes" = "lingoes",
"Cailliez" = "cailliez",
"Square Root" = "sqrt",
"Quasi" = "quasi"),
selected = "none", multiple = FALSE),
checkboxInput("traceBDisp", label = "trace B", value = FALSE),
HTML("Fine tuning parameters"),
numericInput("max_nbdimDisp", "Max n. dimensions", 15),
selectInput("precDisp", "Prec",choices = c("Qt" = "Qt",
"Qj" = "Qj"),
selected = "Qj", multiple = FALSE),
numericInput("tolDisp", "Tolerance", .0000001),
checkboxInput("corZeroDisp", label = "cor.zero", value = TRUE)
),
box(width = NULL, solidHeader = TRUE,
checkboxInput("funEve", label = "Functional evenness", value = FALSE), # Functional evenness
),
box(width = NULL, solidHeader = TRUE,
checkboxInput("funRed", label = "Functional redundancy", value = FALSE), # Functional redundancy
),
box(width = NULL, solidHeader = TRUE,
checkboxInput("funRich", label = "Functional richness", value = FALSE), # Functional richness
)
),
#############
# Left side #
#############
column(width = 8,
conditionalPanel("input.funDisp == 1",
box(width = NULL, solidHeader = TRUE,
HTML("<h3> Functional dispersion </h3>"),
DTOutput("tbl_f_disp")
#HTML("<h5> Note: If richness is below 3, the indices can not be calculated. </h5>"),
#downloadButton("download_div", label = "Download Table")
)
)
)
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
shinytest::recordTest("~/Desktop/biomonitoR_app/biomonitoR_app")
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
shinytest::recordTest("~/Desktop/biomonitoR_app/biomonitoR_app")
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
fluidRow(
column(width = 4 ,
box(width = NULL, solidHeader = TRUE,
HTML("<h3> <b>Data Input & Management</b> </h3>
To import your dataset in the biomonitoR-app, it is important to follow two simple rules: <br><br>
<b>1)</b> The first column of your dataset has to contain the taxa names, and it has to be named <i><b>'Taxa'</b></i>; <br><br>
<b>2)</b> The other columns of your dataset can contain abundance or presence/absence data, and they have to
be named with the sampling point stations. <br> <br>
<h5> Note: biomonitoR-app can use three pre-setted reference datasets:
macroinvertebrates, macrophytes, and fish.
If you want to import your custom reference dataset, please follow the
instructions present in the <b>Help</b>. </h3>")),
# Import dataset and set main parameters
box(title = "Load file - Community data", solidHeader = FALSE, width = NULL, collapsible = TRUE, collapsed = TRUE,
#radioButtons("filetype", "", choices = c("xlsx","csv","txt"), inline = TRUE),
HTML("Select your data"),
fileInput("file1", label = NULL),
HTML("<h5> Data can be loaded in <b>xlsx</b>, <b>csv</b>, or <b>txt</b> formats.</h5>"),
tags$hr(),
HTML("Select your reference community"),
selectInput("communitytype", "", choices = c("Macroinvertebrates" = "mi",
"Macrophytes" = "mf",
"Fish" = "fi",
"Custom" = "cu"),
selected = "mi", multiple = FALSE),
tags$hr(),
HTML("Select your data type"),
#radioButtons("abutype", "", choiceNames = c("Abundance", "Presence/Absence"), choiceValues = c("sum","bin"), inline = TRUE),
selectInput("abutype", "", choices = c("Abundance" = "sum",
"Presence/Absence" = "bin"),
selected = "sum", multiple = FALSE),
checkboxInput("toBin", label = "Do you want transforms abundance to presence-absence?", value = FALSE) # <- Transforms abundance to presence-absence.
),
# Import Custom reference dataframe
conditionalPanel("input.communitytype == 'cu'",
box(title = "Load file - Custom reference dataframe", solidHeader = FALSE, width = NULL,
#radioButtons("filetypeCustom", "", choices = c("xlsx","csv","txt"), inline = TRUE),
HTML("Select your data"),
fileInput("file2", label = NULL)
)
),
# Data Management --------------------------------------------------------------
# Convert to Vegan format ----
box(title = "Convert to vegan format", solidHeader = FALSE, width = NULL, collapsible = TRUE, collapsed = TRUE,
checkboxInput("veganFormat",
label = HTML("Do you want to convert your data to <b> vegan </b> format?"),
value = FALSE),
HTML("Select the taxonomic level"),
selectInput("taxLeVegan", "", choices = c("Phylum" = "Phylum",
"Class" = "Class",
"Subclass" = "Subclass",
"Order" = "Order",
"Family" = "Family",
"Subfamily" = "Subfamily",
"Tribus" = "Tribus",
"Genus" = "Genus",
"Species" = "Species",
"Subspecies" = "Subspecies",
"Taxa" = "Taxa"),
selected = "Taxa", multiple = FALSE),
# radioButtons("taxLeVegan", "", choiceNames = c("Phylum", "Class", "Subclass",
#                                                "Order", "Family", "Subfamily",
#                                                "Tribus", "Genus", "Species",
#                                                "Subspecies", "Taxa") ,
#              choiceValues = c("Phylum", "Class", "Subclass",
#                               "Order", "Family", "Subfamily",
#                               "Tribus", "Genus", "Species",
#                               "Subspecies", "Taxa"), inline = TRUE)
),
# Remove taxa ----
# Which taxon/a do you u want to remove from your dataset?
box(title = "Remove taxa", solidHeader = FALSE, width = NULL, collapsible = TRUE, collapsed = TRUE,
selectizeInput("removeTaxa", "Select taxa to exclude from your dataset",
choices = NULL, multiple = TRUE)
),
),
#############
# Left side #
#############
column(width = 8,
uiOutput("tbl"),
uiOutput("tblVegan"),
uiOutput("tblRmTaxa")
)
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
macro.1 <-  read.csv("./Desktop/biomonitoR_app/biomonitoR_app/macro_ex.csv")
data_bio <- as_biomonitor(macro.1)
data_agr <- aggregate_taxa(data_bio)
data_ts <- assign_traits(data_agr)
data_ts_av <- average_traits(data_ts)
col_blocks <- c(8, 7, 3, 9, 4, 3, 6, 2, 5, 3, 9, 8, 8, 5, 7, 5, 4, 4, 2, 3, 8)
f_disp(data_agr, trait_db = data_ts_av, type = "F", col_blocks = col_blocks)
x <- f_disp(data_agr, trait_db = data_ts_av, type = "F", col_blocks = col_blocks)
x <- as.data.frame(f_disp(data_agr, trait_db = data_ts_av, type = "F", col_blocks = col_blocks))
x
x <- data.frame(f_disp(data_agr, trait_db = data_ts_av, type = "F", col_blocks = col_blocks))
x
x <- t(as.data.frame(f_disp(data_agr, trait_db = data_ts_av, type = "F", col_blocks = col_blocks)))
x
colnames(x)
rownames(x) <- NULL
x
x <- t(data.frame(f_disp(data_agr, trait_db = data_ts_av, type = "F", col_blocks = col_blocks)))
rownames(x) <- NULL
x
x <- t(f_disp(data_agr, trait_db = data_ts_av, type = "F", col_blocks = col_blocks))
x
as.data.frame(x)
x <- as.data.frame(t(f_disp(data_agr, trait_db = data_ts_av, type = "F", col_blocks = col_blocks)))
x
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
shiny::runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
data(macro_ex)
data_bio <- as_biomonitor(macro_ex)
data_agr <- aggregate_taxa(data_bio)
rmTaxa <- remove_taxa(data_agr, taxa = c("Baetis")) # Remove taxa
View(rmTaxa)
data_ts <- assign_traits(rmTaxa)
data_bio.rm <- as_biomonitor(rmTaxa)
data_agr.rm <- aggregate_taxa(rmTaxa)
data_agr.rm <- aggregate_taxa(data_bio.rm)
data_ts <- assign_traits(data_bio.rm)
data_ts <- assign_traits(data_agr.rm)
runApp('Desktop/biomonitoR_app/biomonitoR_app')
View(rmTaxa)
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
runApp('Desktop/biomonitoR_app/biomonitoR_app')
shiny::runApp()
runApp()
runApp()
runApp()
fluidRow(
##############
# Right side #
##############
column(width = 4 ,
box(width = NULL, solidHeader = TRUE,
HTML("<h3>
<b>Taxonomy check</b>
</h3> This panel can help you to check the nomenclature of your taxa and eventually remove taxa from the analysis. <br>
Taxa names are checked against the community type reference datasets or your custom
dataset if loaded.
<br>
If there are potentially erroneus names in your dataset, you can find possible
suggestions into the in in the appropriate space. <br>
<br>
Non-identfied taxa will be discarded.")),
uiOutput("correctNames"), # Open the box with correct names suggestions
# Remove taxa ----
# Which taxon/a do you u want to remove from your dataset?
box(title = "Remove taxa", solidHeader = FALSE, width = NULL, collapsible = TRUE, collapsed = TRUE,
selectizeInput("removeTaxa", "Select taxa to exclude from your dataset",
choices = NULL, multiple = TRUE)
)
),
#############
# Left side #
#############
column(width = 8,
uiOutput("tblTaxonomy"),
uiOutput("tblRmTaxa")
)
runApp()
runApp()
runApp()
fluidRow(
##############
# Right Side #
##############
column(width = 4 ,
box(width = NULL, solidHeader = TRUE,
HTML("<h3> <b>Custom Reference Datset</b> </h3>
To import your dataset in the biomonitoR-app, it is important to follow two simple rules: <br><br>
<h5> Note: biomonitoR-app can use three pre-setted reference datasets:
macroinvertebrates, macrophytes, and fish.
If you want to import your custom reference dataset, please follow the
instructions present in the <b>Help</b>. </h3>")
),
# Import dataset and set main parameters
box(title = "Create your Custom reference dataset", width = NULL, solidHeader = TRUE,
HTML("Select your data <h5> Data can be loaded in <b>.xlsx</b>, <b>.csv</b>, or <b>.txt</b> formats.</h5>"),
fileInput("fileCRD", label = NULL),
tags$hr(),
HTML("Select your reference community"),
selectInput("communitytypeCRD", "", choices = c("Macroinvertebrates" = "mi",
"Macrophytes" = "mf",
"Fish" = "fi",
"Custom" = "cu"),
selected = "mi", multiple = FALSE),
checkboxInput("runCRD", label = "Create your Custom reference dataset", value = FALSE)
# box(title = "Dou you want to download your Custom Reference Dataset?", solidHeader = FALSE, width = NULL,
#     checkboxInput("downloadCRD", label = "Download", value = FALSE)
# )
),
#############
# Left Side #
#############
column(width = 8,
uiOutput("tbl_boxInputTree"),
uiOutput("tbl_boxCRD")
#box(DTOutput("tblCRD"), width = NULL),
# conditionalPanel("input.downloadCRD == 1",
#                  box(downloadButton("download_CRD", label = "Download Table"), width = NULL))
)
)
runApp()
runApp()
runApp()
