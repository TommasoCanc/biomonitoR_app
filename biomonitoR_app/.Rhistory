suggestNamesBio( wrong_names , custom = custom , group = group )
}
wrong_names
suggestNamesBio(wrong_names)
if( group == "mi" ){
dic.path <- system.file( "dict" , "mi_dictionary.txt", package = "biomonitorweb" )
# very important to set cache equal to FALSE, otherwise suggestNames will provide inconsistent results.
dictio <- dictionary( dic.path, cache = F )
}
# get unique names present in the taxa list
taxaCar <- unique( as.character( wrong_names ) )
taxaCar
taxaCar <- gsub( " " , '_' , taxaCar )
taxaCar
nameCheck <- hunspell_check( taxaCar , dict = dictio )
nameCheck
nameSuggest <- hunspell_suggest( taxaCar , dict = dictio )
nameSuggest
wrongName <- as.list( taxaCar ) # vector of wrong taxa names
wrongName
for( i in 1:length( nameSuggest ) ){
nameSuggest[[ i ]] <- c( wrongName[[ i ]] , nameSuggest[[ i ]]  )
}
nameSuggest
gsub( "_" , " " , nameSuggest )
nameSuggest
unlist(nameSuggest)
unlist(nameSuggest[[1]])
gsub( "_" , " " , unlist(nameSuggest[[1]]) )
gsub( "_" , " " , unlist(nameSuggest[[2]]) )
nameSuggest[[2]] <- gsub( "_" , " " , unlist(nameSuggest[[2]]) )
nameSuggest
i=1
nameSuggest <- hunspell_suggest( taxaCar , dict = dictio )
wrongName <- as.list( taxaCar ) # vector of wrong taxa names
wrongName
nameSuggest[[ i ]] <- c( wrongName[[ i ]] , nameSuggest[[ i ]]  )
nameSuggest
nameSuggest[[i]] <- gsub( "_" , " " , unlist(nameSuggest[[i]]) )
nameSuggest
for( i in 1:length( nameSuggest ) ){
nameSuggest[[ i ]] <- c( wrongName[[ i ]] , nameSuggest[[ i ]]  )
nameSuggest[[i]] <- gsub( "_" , " " , unlist(nameSuggest[[i]]) )
}
for( i in 1:length( nameSuggest ) ){
nameSuggest[[ i ]] <- c( wrongName[[ i ]] , nameSuggest[[ i ]]  )
nameSuggest[[i]] <- gsub( "_" , " " , unlist(nameSuggest[[i]]) )
}
nameSuggest
library(devtools)
install_github("TommasoCanc/biomonitorweb")
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
DF_init <- read.csv("./Desktop/GitHub/biomonitoR_app/biomonitoR_app/macro_ex.csv", header = TRUE, sep = ",")
head(DF_init)
bioImp <- bioImport(DF, group = "mi")
DF <- DF_init
bioImp <- bioImport(DF, group = "mi")
bioImp
DF_init <- read.csv("./Desktop/GitHub/biomonitoR_app/biomonitoR_app/macro_ex.csv", header = TRUE, sep = ",")
head(DF_init)
x=DF
capWords <- function( x ) {
# see ?tolower
cap <- paste( toupper( substring( x , 1 , 1 ) ), tolower( substring( x , 2 ) ),
sep = "" , collapse = " " )
}
suggestNamesBio <- function( x , custom = F , group = group , ... ){
# set the path of the dictionary. If group is mi or mf the dictionary is stored in the package path
# while if group is set to custom the dictionary is created in the user directory.
# the check of the names relies on the package hunspell
if( custom == F ){
if( group == "mi" ){
dic.path <- system.file( "dict" , "mi_dictionary.txt", package = "biomonitorweb" )
# very important to set cache equal to FALSE, otherwise suggestNames will provide inconsistent results.
dictio <- dictionary( dic.path, cache = F )
}
if( group == "mf" ){
dic.path <- system.file( "dict" , "mf_dictionary.txt" , package = "biomonitorweb" )
dictio <- dictionary( dic.path , cache = F )
}
if( group == "fi" ){
dic.path <- system.file( "dict" , "fi_dictionary.txt" , package = "biomonitorweb" )
dictio <- dictionary( dic.path , cache = F )
}
}
if( custom == T ){
dic.path <- c( paste(getwd() , "/custom_dictio.dic" , sep = "" ) )
dictio <- dictionary( dic.path , cache = F )
}
# get unique names present in the taxa list
taxaCar <- unique( as.character( x ) )
# replace space with underscore to be compatible with hunspell
taxaCar <- gsub( " " , '_' , taxaCar )
# nameCheck and nameSuggest check for the wrong names and suggest for correct names.
# hunspell_check and hunspell_suggest are from the package hunspell
nameCheck <- hunspell_check( taxaCar , dict = dictio )
nameSuggest <- hunspell_suggest( taxaCar , dict = dictio )
# This part of the function change the wrong names to correct
# the user is provided with an interactive selection interface with select.list
wrongName <- as.list( taxaCar ) # vector of wrong taxa names
for( i in 1:length( nameSuggest ) ){
nameSuggest[[ i ]] <- c( wrongName[[ i ]] , nameSuggest[[ i ]]  )
nameSuggest[[i]] <- gsub( "_" , " " , unlist(nameSuggest[[i]]) )
}
nameSuggest
}
load("/Users/tommasocancellario/Downloads/sysdata.rda")
bioImport.1 <- function( x , group = "mi" , dfref = NULL ){
# set the reference database for the specified group
if( identical( group , "mi" ) ){
ref <- mi_ref
}
if( identical( group , "mf" ) ){
ref <- mf_ref
}
if( is.data.frame( dfref ) ){
ref <- dfref
}
x$Taxa <- trimws( sapply( x$Taxa , capWords , USE.NAMES = F ) )
x <- aggregate( . ~ Taxa , x , FUN = sum )
taxa_check <- unique( unlist( ref ) )
taxa_check <- as.character( taxa_check[ taxa_check != "" ] )
wrong_names <- x[ ! x[ , "Taxa" ] %in% taxa_check  , "Taxa" ]
if( length( wrong_names ) == 0 ){
wrong_names
} else {
custom <- FALSE
if( is.data.frame( dfref ) ){
custom <- TRUE
}
suggestNamesBio( wrong_names , custom = custom , group = group )
}
}
bioImport.1(x)
x=DF
DF_init <- read.csv("./Desktop/GitHub/biomonitoR_app/biomonitoR_app/macro_ex.csv", header = TRUE, sep = ",")
head(DF_init)
DF <- DF_init
bioImport.1(DF)
remove.packages("biomonitorweb")
install_github("TommasoCanc/biomonitorweb")
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
DF_init <- read.csv("./Desktop/GitHub/biomonitoR_app/biomonitoR_app/macro_ex.csv", header = TRUE, sep = ",")
head(DF_init)
load("/Users/tommasocancellario/Downloads/sysdata.rda")
DF_init <- read.csv("./Desktop/GitHub/biomonitoR_app/biomonitoR_app/macro_ex.csv", header = TRUE, sep = ",")
head(DF_init)
DF <-  DF_init
bioImp <- bioImport(DF, group = input$communitytype)
bioImp <- bioImport(DF, group = "mi")
bioImp
if( identical( group , "mi" ) ){
ref <- mi_ref
}
group = "mi"
if( identical( group , "mi" ) ){
ref <- mi_ref
}
x$Taxa <- trimws( sapply( x$Taxa , capWords , USE.NAMES = F ) )
x$Taxa
x=DF
x$Taxa <- trimws( sapply( x$Taxa , capWords , USE.NAMES = F ) )
x
capWords <- function( x ) {
# see ?tolower
cap <- paste( toupper( substring( x , 1 , 1 ) ), tolower( substring( x , 2 ) ),
sep = "" , collapse = " " )
}
x$Taxa <- trimws( sapply( x$Taxa , capWords , USE.NAMES = F ) )
x
x <- aggregate( . ~ Taxa , x , FUN = sum )
taxa_check <- unique( unlist( ref ) )
taxa_check
taxa_check <- as.character( taxa_check[ taxa_check != "" ] )
wrong_names <- x[ ! x[ , "Taxa" ] %in% taxa_check  , "Taxa" ]
wrong_names
if( length( wrong_names ) == 0 ){
wrong_names
} else {
custom <- FALSE
if( is.data.frame( dfref ) ){
custom <- TRUE
}
suggestNamesBio( wrong_names , custom = custom , group = group )
}
dfref = NULL
if( length( wrong_names ) == 0 ){
wrong_names
} else {
custom <- FALSE
if( is.data.frame( dfref ) ){
custom <- TRUE
}
suggestNamesBio( wrong_names , custom = custom , group = group )
}
suggestNamesBio <- function( x , custom = F , group = group , ... ){
# set the path of the dictionary. If group is mi or mf the dictionary is stored in the package path
# while if group is set to custom the dictionary is created in the user directory.
# the check of the names relies on the package hunspell
if( custom == F ){
if( group == "mi" ){
dic.path <- system.file( "dict" , "mi_dictionary.txt", package = "biomonitorweb" )
# very important to set cache equal to FALSE, otherwise suggestNames will provide inconsistent results.
dictio <- dictionary( dic.path, cache = F )
}
if( group == "mf" ){
dic.path <- system.file( "dict" , "mf_dictionary.txt" , package = "biomonitorweb" )
dictio <- dictionary( dic.path , cache = F )
}
if( group == "fi" ){
dic.path <- system.file( "dict" , "fi_dictionary.txt" , package = "biomonitorweb" )
dictio <- dictionary( dic.path , cache = F )
}
}
if( custom == T ){
dic.path <- c( paste(getwd() , "/custom_dictio.dic" , sep = "" ) )
dictio <- dictionary( dic.path , cache = F )
}
# get unique names present in the taxa list
taxaCar <- unique( as.character( x ) )
# replace space with underscore to be compatible with hunspell
taxaCar <- gsub( " " , '_' , taxaCar )
# nameCheck and nameSuggest check for the wrong names and suggest for correct names.
# hunspell_check and hunspell_suggest are from the package hunspell
nameCheck <- hunspell_check( taxaCar , dict = dictio )
nameSuggest <- hunspell_suggest( taxaCar , dict = dictio )
# This part of the function change the wrong names to correct
# the user is provided with an interactive selection interface with select.list
wrongName <- as.list( taxaCar ) # vector of wrong taxa names
for( i in 1:length( nameSuggest ) ){
nameSuggest[[ i ]] <- c( wrongName[[ i ]] , nameSuggest[[ i ]]  )
nameSuggest[[i]] <- gsub( "_" , " " , unlist(nameSuggest[[i]]) )
}
nameSuggest
}
if( length( wrong_names ) == 0 ){
wrong_names
} else {
custom <- FALSE
if( is.data.frame( dfref ) ){
custom <- TRUE
}
suggestNamesBio( wrong_names , custom = custom , group = group )
}
remove.packages("biomonitorweb")
install_github("TommasoCanc/biomonitorweb")
bioImp <- bioImport(DF, group = "mi")
bioImp
bioImport.1 <- function( x , group = "mi" , dfref = NULL ){
# set the reference database for the specified group
if( identical( group , "mi" ) ){
ref <- mi_ref
}
if( identical( group , "mf" ) ){
ref <- mf_ref
}
if( is.data.frame( dfref ) ){
ref <- dfref
}
x$Taxa <- trimws( sapply( x$Taxa , capWords , USE.NAMES = F ) )
x <- aggregate( . ~ Taxa , x , FUN = sum )
taxa_check <- unique( unlist( ref ) )
taxa_check <- as.character( taxa_check[ taxa_check != "" ] )
wrong_names <- x[ ! x[ , "Taxa" ] %in% taxa_check  , "Taxa" ]
if( length( wrong_names ) == 0 ){
wrong_names
} else {
custom <- FALSE
if( is.data.frame( dfref ) ){
custom <- TRUE
}
suggestNamesBio( wrong_names , custom = custom , group = group )
}
}
bioImport.1(DF)
bioImport(DF, group = "mi")
remove.packages("biomonitorweb")
install_github("TommasoCanc/biomonitorweb")
DF_init <- read.csv("./Desktop/GitHub/biomonitoR_app/biomonitoR_app/macro_ex.csv", header = TRUE, sep = ",")
head(DF_init)
DF <-  DF_init
bioImp <- bioImport(DF, group = "mi")
bioImp
install_github("alexology/biomonitorweb")
DF_init <- read.csv("./Desktop/GitHub/biomonitoR_app/biomonitoR_app/macro_ex.csv", header = TRUE, sep = ",")
head(DF_init)
DF <-  DF_init
bioImp <- bioImport(DF, group = "mi")
bioImp
bioImport.1(DF)
suggestNamesBio <- function( x , custom = F , group = group , ... ){
# set the path of the dictionary. If group is mi or mf the dictionary is stored in the package path
# while if group is set to custom the dictionary is created in the user directory.
# the check of the names relies on the package hunspell
if( custom == F ){
if( group == "mi" ){
dic.path <- system.file( "dict" , "mi_dictionary.txt", package = "biomonitorweb" )
# very important to set cache equal to FALSE, otherwise suggestNames will provide inconsistent results.
dictio <- dictionary( dic.path, cache = F )
}
if( group == "mf" ){
dic.path <- system.file( "dict" , "mf_dictionary.txt" , package = "biomonitorweb" )
dictio <- dictionary( dic.path , cache = F )
}
if( group == "fi" ){
dic.path <- system.file( "dict" , "fi_dictionary.txt" , package = "biomonitorweb" )
dictio <- dictionary( dic.path , cache = F )
}
}
if( custom == T ){
dic.path <- c( paste(getwd() , "/custom_dictio.dic" , sep = "" ) )
dictio <- dictionary( dic.path , cache = F )
}
# get unique names present in the taxa list
taxaCar <- unique( as.character( x ) )
# replace space with underscore to be compatible with hunspell
taxaCar <- gsub( " " , '_' , taxaCar )
# nameCheck and nameSuggest check for the wrong names and suggest for correct names.
# hunspell_check and hunspell_suggest are from the package hunspell
nameCheck <- hunspell_check( taxaCar , dict = dictio )
nameSuggest <- hunspell_suggest( taxaCar , dict = dictio )
# This part of the function change the wrong names to correct
# the user is provided with an interactive selection interface with select.list
wrongName <- as.list( taxaCar ) # vector of wrong taxa names
for( i in 1:length( nameSuggest ) ){
nameSuggest[[ i ]] <- c( wrongName[[ i ]] , nameSuggest[[ i ]]  )
nameSuggest[[i]] <- gsub( "_" , " " , unlist(nameSuggest[[i]]) )
}
nameSuggest
}
bioImport.1 <- function( x , group = "mi" , dfref = NULL ){
# set the reference database for the specified group
if( identical( group , "mi" ) ){
ref <- mi_ref
}
if( identical( group , "mf" ) ){
ref <- mf_ref
}
if( is.data.frame( dfref ) ){
ref <- dfref
}
x$Taxa <- trimws( sapply( x$Taxa , capWords , USE.NAMES = F ) )
x <- aggregate( . ~ Taxa , x , FUN = sum )
taxa_check <- unique( unlist( ref ) )
taxa_check <- as.character( taxa_check[ taxa_check != "" ] )
wrong_names <- x[ ! x[ , "Taxa" ] %in% taxa_check  , "Taxa" ]
if( length( wrong_names ) == 0 ){
wrong_names
} else {
custom <- FALSE
if( is.data.frame( dfref ) ){
custom <- TRUE
}
suggestNamesBio( wrong_names , custom = custom , group = group )
}
}
bioImport.1(DF)
load("/Users/tommasocancellario/Downloads/sysdata.rda")
DF_init <- read.csv("./Desktop/GitHub/biomonitoR_app/biomonitoR_app/macro_ex.csv", header = TRUE, sep = ",")
head(DF_init)
DF <- DF_init
bioImp <- bioImport(DF, group = "mi")
bioImp
bioImport.1 <- function( x , group = "mi" , dfref = NULL ){
# set the reference database for the specified group
if( identical( group , "mi" ) ){
ref <- mi_ref
}
if( identical( group , "mf" ) ){
ref <- mf_ref
}
if( is.data.frame( dfref ) ){
ref <- dfref
}
x$Taxa <- trimws( sapply( x$Taxa , capWords , USE.NAMES = F ) )
x <- aggregate( . ~ Taxa , x , FUN = sum )
taxa_check <- unique( unlist( ref ) )
taxa_check <- as.character( taxa_check[ taxa_check != "" ] )
wrong_names <- x[ ! x[ , "Taxa" ] %in% taxa_check  , "Taxa" ]
if( length( wrong_names ) == 0 ){
wrong_names
} else {
custom <- FALSE
if( is.data.frame( dfref ) ){
custom <- TRUE
}
suggestNamesBio( wrong_names , custom = custom , group = group )
}
}
capWords <- function( x ) {
# see ?tolower
cap <- paste( toupper( substring( x , 1 , 1 ) ), tolower( substring( x , 2 ) ),
sep = "" , collapse = " " )
}
suggestNamesBio <- function( x , custom = F , group = group , ... ){
# set the path of the dictionary. If group is mi or mf the dictionary is stored in the package path
# while if group is set to custom the dictionary is created in the user directory.
# the check of the names relies on the package hunspell
if( custom == F ){
if( group == "mi" ){
dic.path <- system.file( "dict" , "mi_dictionary.txt", package = "biomonitorweb" )
# very important to set cache equal to FALSE, otherwise suggestNames will provide inconsistent results.
dictio <- dictionary( dic.path, cache = F )
}
if( group == "mf" ){
dic.path <- system.file( "dict" , "mf_dictionary.txt" , package = "biomonitorweb" )
dictio <- dictionary( dic.path , cache = F )
}
if( group == "fi" ){
dic.path <- system.file( "dict" , "fi_dictionary.txt" , package = "biomonitorweb" )
dictio <- dictionary( dic.path , cache = F )
}
}
if( custom == T ){
dic.path <- c( paste(getwd() , "/custom_dictio.dic" , sep = "" ) )
dictio <- dictionary( dic.path , cache = F )
}
# get unique names present in the taxa list
taxaCar <- unique( as.character( x ) )
# replace space with underscore to be compatible with hunspell
taxaCar <- gsub( " " , '_' , taxaCar )
# nameCheck and nameSuggest check for the wrong names and suggest for correct names.
# hunspell_check and hunspell_suggest are from the package hunspell
nameCheck <- hunspell_check( taxaCar , dict = dictio )
nameSuggest <- hunspell_suggest( taxaCar , dict = dictio )
# This part of the function change the wrong names to correct
# the user is provided with an interactive selection interface with select.list
wrongName <- as.list( taxaCar ) # vector of wrong taxa names
for( i in 1:length( nameSuggest ) ){
nameSuggest[[ i ]] <- c( wrongName[[ i ]] , nameSuggest[[ i ]]  )
nameSuggest[[i]] <- gsub( "_" , " " , unlist(nameSuggest[[i]]) )
}
nameSuggest
}
bioImport.1 <- function( x , group = "mi" , dfref = NULL ){
# set the reference database for the specified group
if( identical( group , "mi" ) ){
ref <- mi_ref
}
if( identical( group , "mf" ) ){
ref <- mf_ref
}
if( is.data.frame( dfref ) ){
ref <- dfref
}
x$Taxa <- trimws( sapply( x$Taxa , capWords , USE.NAMES = F ) )
x <- aggregate( . ~ Taxa , x , FUN = sum )
taxa_check <- unique( unlist( ref ) )
taxa_check <- as.character( taxa_check[ taxa_check != "" ] )
wrong_names <- x[ ! x[ , "Taxa" ] %in% taxa_check  , "Taxa" ]
if( length( wrong_names ) == 0 ){
wrong_names
} else {
custom <- FALSE
if( is.data.frame( dfref ) ){
custom <- TRUE
}
suggestNamesBio( wrong_names , custom = custom , group = group )
}
}
bioImport.1(DF)
bioImport(DF, group = "mi")
shiny::runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
shiny::runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
citation("vegan")
citation("biotic")
install.packages("biotic")
citation("biotic")
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
runApp('Desktop/GitHub/biomonitoR_app/biomonitoR_app')
